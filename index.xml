<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guangchuang Yu</title>
    <link>https://guangchuangyu.github.io/cn/</link>
    <description>Recent content on Guangchuang Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Oct 2017 12:23:16 +0800</lastBuildDate>
    
	<atom:link href="https://guangchuangyu.github.io/cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>映射变量给axis上色</title>
      <link>https://guangchuangyu.github.io/cn/2017/10/set_axis_text_color/</link>
      <pubDate>Mon, 16 Oct 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/10/set_axis_text_color/</guid>
      <description>&lt;p&gt;小伙伴发来这个文章中的图，想要实现类似的图，用变量给axis text上色，并生成legend：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/ggplot2/Screenshot 2017-07-04 14.10.55.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个可以说ggplot2是不支持的，aes映射不会被应用于axis上，而theme也不支持aes映射，你只能自己手动搞个color vector传给theme来上色，但这无法生成legend。&lt;/p&gt;

&lt;p&gt;我只能打开脑洞，legend借助于额外的图层来生成，但这个额外的图层又不是我们想要在图形上展示的，这又是个无米之炊，我能想到的就是让图层透明，实际有，但你看不到，当然这样自动生成的legend也会看不到，但legend可以后面再修改，于是这不支持的事情，就通过变通变得可能：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(ggplot2)

set.seed(2017-07-04)
d &amp;lt;- data.frame(x = letters[1:5], y = rnorm(5), 
		group = sample(c(&amp;quot;Control&amp;quot;, &amp;quot;Treatment&amp;quot;), 5, replace=TRUE),
		type = sample(LETTERS[1:2], 5, replace=TRUE)
)

p &amp;lt;- ggplot(d, aes(x,y)) + 
	geom_col(aes(fill=group))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码很好懂，画一个柱状图，按&lt;code&gt;group&lt;/code&gt;上色。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>enrichGO出不来结果？没结果也是正确的结果</title>
      <link>https://guangchuangyu.github.io/cn/2017/10/enrichgo-more-conserve/</link>
      <pubDate>Mon, 09 Oct 2017 13:31:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/10/enrichgo-more-conserve/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Dear Dr. Guangchuang Yu, I write to you regarding a doubt concerning the enrichGO function from Clustalprofiler package. I have been used this package before, but now I&amp;rsquo;m using the same R script and I have an error message.&lt;/p&gt;

&lt;p&gt;This is the command I use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go.bp &amp;lt;- enrichGO(gene = gene.df$ENSEMBL, universe = universe.ENSEMBLID, keytype = &amp;lsquo;ENSEMBL&amp;rsquo;, OrgDb = org.Ce.eg.db, ont = &amp;lsquo;BP&amp;rsquo;, pAdjustMethod = &amp;lsquo;BH&amp;rsquo;, pvalueCutoff = 0.01, qvalueCutoff = 0.05, readable=T)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the error is the following one:&lt;/p&gt;

&lt;p&gt;No gene set have size &amp;gt; 10 &amp;hellip;
&amp;ndash;&amp;gt; return NULL&amp;hellip;&lt;/p&gt;

&lt;p&gt;My input list is attached to this email (101 genes in total). When I use this list in a web resource such as GOrilla it gives to me the proper GO terms.&lt;/p&gt;

&lt;p&gt;Thank you very much in advance. Best regards,&lt;/p&gt;

&lt;p&gt;María&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近clusterProfiler用户的问题，这个问题还蛮普遍。这个我在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484414&amp;amp;idx=1&amp;amp;sn=096f758f04f875e25c333c345f530742&amp;amp;chksm=ec43b2b9db343baf4e2a8640f48e7e72b3ef1b057c91c68905debb2bb54e5d2fdda62438628a#rd&#34;&gt;why clusterProfiler fails&lt;/a&gt;》中也有谈到，并不是能出结果就是好的。没有结果也是一种结果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何假装假期还在工作</title>
      <link>https://guangchuangyu.github.io/cn/2017/10/ssh-on-android/</link>
      <pubDate>Wed, 04 Oct 2017 00:49:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/10/ssh-on-android/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483886&amp;amp;idx=1&amp;amp;sn=cb76891dff5787025f6b99cdcc723d86&amp;amp;chksm=ec43b0a9db3439bfcec1c9ac3c0d00e6190cf4d3d02d9d3dc767007e0ff68b4fbd8064bb0f77#rd&#34;&gt;CS0: ChIPseq从入门到放弃&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484054&amp;amp;idx=2&amp;amp;sn=9a42f1094349a0bd09a5e0b7c44595e0&amp;amp;chksm=ec43b3d1db343ac7e11d92eda3eb1837aab46f79bb109e6cdbba466e4693d041a87fa698ef1b&#34;&gt;我在MSnbase里做了什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484727&amp;amp;amp;idx=1&amp;amp;amp;sn=a70494626e7c329addea51ac6b82c578&amp;amp;amp;chksm=ec43b470db343d6661ba2498e5b03d300f281cb24c82dff0b53fac62b55831ab6207e9a0c20e#rd&#34;&gt;博士养成记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我在上面三篇文章里，都吐槽了张大砖家，这里穿插个故事，当时有门课是去嘉道理農場，在很偏的山上，而且是封闭式，再者离港大很远。选课是先告诉砖家的，上课前也跟砖家讲，然后第一天上课了，人不在实验室，第二天砖家就来了下面这样的信：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CS6: ChIP数据可视化</title>
      <link>https://guangchuangyu.github.io/cn/2017/10/chipseeker-visualization/</link>
      <pubDate>Sun, 01 Oct 2017 11:44:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/10/chipseeker-visualization/</guid>
      <description>&lt;p&gt;2017眼看要结束，立下写《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483886&amp;amp;idx=1&amp;amp;sn=cb76891dff5787025f6b99cdcc723d86&amp;amp;chksm=ec43b0a9db3439bfcec1c9ac3c0d00e6190cf4d3d02d9d3dc767007e0ff68b4fbd8064bb0f77#rd&#34;&gt;CS0: ChIPseq从入门到放弃&lt;/a&gt;》的flag还没完成，当时ChIPseeker是33个引用，现在已经80了，时间过得好快。&lt;/p&gt;

&lt;p&gt;最近放羊的Jimmy给我发来了一个截屏：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/Bioconductor/ChIPseeker/vis/WechatIMG51.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;说了一篇新文章，大段在称赞ChIPseeker：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>听说你还不会画heatmap</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/dose-simplot/</link>
      <pubDate>Sat, 30 Sep 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/dose-simplot/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/DOSE/simplot/WechatIMG52.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;群众纷纷表示图二是Excel画的，我觉得也是！Excel是生物学家的最爱啊。虽然做生信的人都看不上，最主要是没有记录，不具备可重复性。但现实就是大家都爱Excel。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ko数据库ID转换</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/ko-id-conversion/</link>
      <pubDate>Wed, 27 Sep 2017 19:11:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/ko-id-conversion/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Since the clusterProfiler is a very useful tools for GO and Kegg annotation.At present I want to use it to enrich for kegg result while only have the KO number ,So I want to convert the KO number to the pathway function,Is there have any function or methods in the software can convert it?any help will be appreciated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/GuangchuangYu/clusterProfiler/issues/99&#34;&gt;这个问题&lt;/a&gt;问说他想转KO到通路，首先这是一个常见的错误，很多人分不清&lt;code&gt;K&lt;/code&gt;和&lt;code&gt;ko&lt;/code&gt;，所以在我告诉他可以把&lt;code&gt;K number&lt;/code&gt;转成&lt;code&gt;ko pathway&lt;/code&gt;的时候，我先指出他的错误。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ko&lt;/code&gt; is actually pathway map. I think you are talking about &lt;code&gt;K&lt;/code&gt; number mapping to &lt;code&gt;ko&lt;/code&gt; pathway.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; bitr_kegg(&amp;quot;K00844&amp;quot;, &amp;quot;kegg&amp;quot;, &amp;quot;Path&amp;quot;, &amp;quot;ko&amp;quot;)
     kegg    Path
1  K00844 ko00010
2  K00844 ko00051
3  K00844 ko00052
4  K00844 ko00500
5  K00844 ko00520
6  K00844 ko00521
7  K00844 ko00524
8  K00844 ko01100
9  K00844 ko01110
10 K00844 ko01120
11 K00844 ko01130
12 K00844 ko01200
13 K00844 ko04066
14 K00844 ko04910
15 K00844 ko04930
16 K00844 ko04973
17 K00844 ko05230
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再见joyplot</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/goodbye-joyplot/</link>
      <pubDate>Fri, 15 Sep 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/goodbye-joyplot/</guid>
      <description>&lt;p&gt;微信公众号平台大部分人都是抄来抄去的二手资料，像joyplot这种特别新的东西，就很难看到，我试着搜索了一下，发现只有三篇，都是我写的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484586&amp;amp;idx=1&amp;amp;sn=2c4aaca92147d901fb5421cdb99d16de&amp;amp;chksm=ec43b5eddb343cfb34c907ddfdba74e129ee7ef896219a888a56b36738a0f6062bb2cf0ab99f#rd&#34;&gt;joyplot：一种波涛汹涌，哦不对，是山峰叠峦的可视化方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484682&amp;amp;idx=1&amp;amp;sn=21944039080612bed8bda7b3070015b3&amp;amp;chksm=ec43b44ddb343d5bcba5c22e33b6b26ce8bfee6e7b913115c19e0e14e930699ab602445d0e89#rd&#34;&gt;ggjoy facet with ggtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484750&amp;amp;amp;idx=1&amp;amp;amp;sn=19aa83580ad91e18d3fe23cc42675628&amp;amp;amp;chksm=ec43b409db343d1f189bf1d1e6499ac8bd034ce52e90454d7e2b568b6901b5d2f5bdf31fa887#rd&#34;&gt;joyplot：GSEA的结果也能快乐起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R, python喊你回家吃饭啦🍚</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/rice/</link>
      <pubDate>Wed, 13 Sep 2017 13:37:55 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/rice/</guid>
      <description>&lt;p&gt;在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484507&amp;amp;amp;idx=1&amp;amp;amp;sn=295454a59613bfd977f407958bec787e&amp;amp;amp;chksm=ec43b51cdb343c0acea87661fe5144a5817503a2fdc8f316d56fd28d33291084bc718330c428#rd&#34;&gt;你所不知道的，R的N种打开方式&lt;/a&gt;》一文中，我介绍了R的N种界面，这里将介绍一个用python写的极其现代化的R命令行界面，rice之于R，就像ipython之于python一样。&lt;/p&gt;

&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;轻量，不需要编译&lt;/li&gt;
&lt;li&gt;多行编辑，这点很重要啊，长长的命令可以换行后，随便回去编辑前面的指令&lt;/li&gt;
&lt;li&gt;语法高亮，这可是R命令行所没有的，看起来舒服多了&lt;/li&gt;
&lt;li&gt;自动补齐，减少输入&lt;/li&gt;
&lt;li&gt;支持bracketed paste mode，也就是说你copy-paste了有换行符的字符串，不会拷进去就自动执行了&lt;/li&gt;
&lt;li&gt;支持Windows, macOS 和 Linux&lt;/li&gt;
&lt;li&gt;支持vi, emacs等编辑模式&lt;/li&gt;
&lt;li&gt;可以多种高亮模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>highlight clade of unrooted tree</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/highlight-clade-of-unrooted-tree/</link>
      <pubDate>Tue, 12 Sep 2017 20:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/highlight-clade-of-unrooted-tree/</guid>
      <description>&lt;p&gt;最初github上用户（&lt;a href=&#34;https://github.com/JustGitting&#34;&gt;@JustGitting&lt;/a&gt;）报告说&lt;code&gt;geom_hilight&lt;/code&gt;和&lt;code&gt;geom_cladelabel&lt;/code&gt;不能用于unrooted树。详见：&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree/issues/118&#34;&gt;https://github.com/GuangchuangYu/ggtree/issues/118&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我表示这确实是不行的，然后这就变成了feature request。我继续表示unrooted tree在ggtree中的实现并不好，我只实现了equal angle algorithm，在写注释图层之前，如果我有时间的话，我希望可以先实现更好的layout algorithm。&lt;/p&gt;

&lt;p&gt;然后JustGitting表示，他发现python的ETE和R的ape，在无根树的可视化上好像都不太行。问我有什么unrooted的layout algorithm，有没有什么参考文献，或许他可以帮忙实现，因为他觉得ggtree是最成熟的软件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gseaplot自定义颜色</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/color-in-gseaplot/</link>
      <pubDate>Mon, 11 Sep 2017 19:11:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/color-in-gseaplot/</guid>
      <description>&lt;p&gt;《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484730&amp;amp;amp;idx=1&amp;amp;amp;sn=48b8c24b6cfb6162f8fb3f3861ddfe1b&amp;amp;amp;chksm=ec43b47ddb343d6b37581fa81b0bf11b5141a446333b1b961ef1ad4f80da4c4732d7bc3432c2#rd&#34;&gt;听说你有RNAseq数据却不知道怎么跑GSEA&lt;/a&gt;》一文有小伙伴问封面的gseaplot能否换颜色，于是我就随手支持了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设置ggplot所有字体</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/ggplot2-set-font/</link>
      <pubDate>Mon, 04 Sep 2017 16:14:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/ggplot2-set-font/</guid>
      <description>&lt;p&gt;最近公众号「生信媛」和「生信宝典」的小伙伴在说ggplot2无法一次性设置所有字体，&lt;code&gt;theme&lt;/code&gt;只能设置axis text, title这些，而搞不了&lt;code&gt;geom_text&lt;/code&gt;，&lt;code&gt;geom_text&lt;/code&gt;必须要手工输入&lt;code&gt;family=XXX&lt;/code&gt;来设置，因为不能使用&lt;code&gt;theme&lt;/code&gt;来更换，也就是说没办法通过后处理来设定，比较麻烦。&lt;/p&gt;

&lt;p&gt;这显然是不对的，后处理必须可以的，一次性满足所有愿望也只是因为没人写个神奇的函数而已。于是我就动手写了个&lt;code&gt;set_font&lt;/code&gt;的函数。&lt;/p&gt;

&lt;p&gt;假设我们有下图：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
d &amp;lt;- data.frame(x=rnorm(10), y=rnorm(10), lab=LETTERS[1:10])
p &amp;lt;- ggplot(d, aes(x, y)) + 
    geom_text(aes(label=lab, color=lab), size=10) + 
	geom_text(aes(y, x, label=lab), size=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3D版邪恶的曲线</title>
      <link>https://guangchuangyu.github.io/cn/2017/09/3d-breast/</link>
      <pubDate>Mon, 04 Sep 2017 14:13:35 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/09/3d-breast/</guid>
      <description>&lt;p&gt;我的公众号biobabble第一篇原创文章《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247483816&amp;amp;amp;idx=1&amp;amp;amp;sn=cbfbc284f4edb165ac65f7926f7f8fcc&amp;amp;amp;chksm=ec43b0efdb3439f91ec4f570f7be65e442e21e403481b969d69449464ae1986c7983551de04d#rd&#34;&gt;邪恶的曲线&lt;/a&gt;》，因为太邪恶，当时只推送给男性关注者，由于不是推送给所有人，所以历史记录是翻不到的，之前有再文字推送一下链接，结果评论区全是差评，我也是蛮囧rz的…&lt;/p&gt;

&lt;p&gt;无意中我又翻到了一张2012年2月份画的3D版本，尽管你们要差评，还是想分享一下。代码就在截屏之中，想玩的话，可以照着输入，支持鼠标旋转哦，可以慢慢把玩（太邪恶了）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你所没见过的苹果</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/apple-logo-emoji/</link>
      <pubDate>Tue, 29 Aug 2017 17:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/apple-logo-emoji/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/MISC/iphone5s.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5s无缘无故突然就自带3D效果，可是苹果没送我3D眼镜啊！做为一个果粉，自从乔帮主离去之后，对苹果是越来越无爱了。&lt;/p&gt;

&lt;p&gt;anyway，对于这部陪伴许久的手机，还是要纪念一下的。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484489&amp;amp;amp;idx=1&amp;amp;amp;sn=36bbdee1da96aee301f217e61cc8e3b5&amp;amp;amp;chksm=ec43b50edb343c186a58494e32ffe7df6ae9d960a37772fb5887a9c3f7461ab906b90d1a34f0#rd&#34;&gt;按地理位置分面&lt;/a&gt;》一文最后我埋了个伏笔，写到最后的时候，我想到的是可以拿来画个元素周期表，但懒得搞，在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484506&amp;amp;amp;idx=1&amp;amp;amp;sn=59bc85733a37c4aa8036e43c6d3e7523&amp;amp;amp;chksm=ec43b51ddb343c0b7417b8fe924a86d0d974163b39fe6c8aa72504d1e0ef4c3393aa41659de4#rd&#34;&gt;ggplot2分面之像素艺术&lt;/a&gt;》一文里用一只火鸡展示了用图来拼像素画的思路，回应了前文的伏笔。今天继续展示一个像素画，为了纪念我的iphone5S，当然我要画个苹果🍎出来。&lt;/p&gt;

&lt;p&gt;这里的图，用的是emoji来画，如果你还不会用emoji来画图装逼，赶紧戳《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484416&amp;amp;idx=1&amp;amp;sn=c089403a2b8ab03d241b6d99ef138f50&amp;amp;chksm=ec43b547db343c51bdae5f76b399072629720cf646ddc1c0b758c7c76d57e8b1e35b47221cf6&#34;&gt;看完此文, 你也能够大开脑洞, 上升逼格&lt;/a&gt;》。然后用&lt;code&gt;geofacet&lt;/code&gt;来拼出像素画，这个时候，你应该想到可以拿来拼你的照片，画个某个形状的照片墙了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于重用代码与文章抄袭</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/source-code-reuse/</link>
      <pubDate>Sun, 20 Aug 2017 20:27:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/source-code-reuse/</guid>
      <description>&lt;p&gt;《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;amp;mid=2247484733&amp;amp;amp;idx=1&amp;amp;amp;sn=b43739e02ef7e7892f196aa51a1c2e59&amp;amp;amp;chksm=ec43b47adb343d6c98b240a0dfed9abe1ab46e230535a44f2b47bf69cc7b45520f7c7fd38231#rd&#34;&gt;大学教授力挺抄袭，强行洗地到裤衩都不要了，到底图什么？&lt;/a&gt;》这篇文章发出来之后，引起大家讨论，有一些小伙伴截了屏给我看。所以我想有必要再讲几句，我这篇文章写&lt;strong&gt;两个方面&lt;/strong&gt;，一方面是重用代码，一方面是文章抄袭，这两方面可以是不相关的，这里的文章抄袭并不特指你抄了代码。&lt;/p&gt;

&lt;p&gt;X教授《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484733&amp;amp;idx=2&amp;amp;sn=b6c3a81f38c0f60433e8ccd721a7ca3b&amp;amp;chksm=ec43b47adb343d6c0bee4ae222af03353329173b9ae87c588d6bb19f95619dc46b829d0af1b6#rd&#34;&gt;如何姿势正确的使用他人代码？&lt;/a&gt;》，总结起来两个点，一是开源代码随便用，二是文章有引用/致谢就OK。这两个点都是错误的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>大学教授力挺抄袭，强行洗地到裤衩都不要了，到底图什么？</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/plagiarism/</link>
      <pubDate>Sat, 19 Aug 2017 10:52:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/plagiarism/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;连遮羞布都不要，难道这是个一被子的故事?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;事情开始于我整理并曝光了西安电子科技大学一个讲师读在职博士期间抄袭了两篇文章，并顺利拿到学位晋升为副教授的故事。&lt;/p&gt;

&lt;h2 id=&#34;这个故事很精彩&#34;&gt;这个故事很精彩&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;亮点1&lt;/strong&gt;: 期间发现了一条抄袭链，GOSim被DOSim抄，而DOSim又被HPOSim抄，抄袭者都在文章中把抄来的算法实现当成自己做的东西来介绍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;亮点2&lt;/strong&gt;: ppiPre抄袭GOSemSim的文章，我跟BMC Systems Biology反馈了，而编辑部竟然各种包庇，最后抄袭者两面三刀，和编辑部黑箱操作，在未告知我的情况下，出来一个洗地的Erratum，把抄袭说成不好意思，忘记引用了。&lt;/p&gt;

&lt;p&gt;整个过程连载于以下四篇文章中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484602&amp;amp;idx=1&amp;amp;sn=d81f54bd2cd04a97d54ae13f4aa44f29&amp;amp;chksm=ec43b5fddb343ceb140b3302e3ad592f82572506cb3d99f0d1c65c9829cf5564948e53d73da8#rd&#34;&gt;[连载1]：学术期刊的学术不端，你见过吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=bcb696bba156bc433cae638a461bdcdb&amp;amp;chksm=ec43b58ddb343c9b546cf7c4b3d032da610ce89d0b8c1778cb723cf74cdfa11c11bbedf3557a#rd&#34;&gt;[连载2]：Editor你的心不会痛吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484629&amp;amp;idx=1&amp;amp;sn=f6224e30a6a4fde1461a050b642d80ec&amp;amp;chksm=ec43b592db343c84f70689c39525a29d69f69fe4a62f76e69ecbb18634cd6baef0500a7fe6a6#rd&#34;&gt;[连载3]：辣眼睛，一篇抄袭引发的系列血案！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484637&amp;amp;idx=1&amp;amp;sn=973088de67527548429542d45344c714&amp;amp;chksm=ec43b59adb343c8c2f25bc077695a5f6d6c6b59650102670dbfe7cf9b00a32698775593722c5#rd&#34;&gt;[连载4]：我像是一颗棋，进退任由你决定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果想要分享这整个过程，可以分享以下这个汇总的文章：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484640&amp;amp;idx=1&amp;amp;sn=478f77b8f03eb9793bafc8f18e126097&amp;amp;chksm=ec43b5a7db343cb11fc9e0c232e0de0db7ec444abf5e8e3bd703f83a3cb31695f10359b47b8f#rd&#34;&gt;从业超过10年，未见过如此厚颜无耻之人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Galaxy-ChIPseq流程</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/galaxy-chipseeker/</link>
      <pubDate>Tue, 15 Aug 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/galaxy-chipseeker/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇文章介绍如果把ChIPseeker搬上galaxy，和galaxy上其它软件一起拼成流程，跑一个ChIPseq注释的流程，从fastq文件开始，比对生成bam文件，peak calling生成bed文件，基因组注释，一个完整的流程，这个流程一旦设置好，每次跑都只是点点鼠标就可以了。
本文额外附送：
1. 如何把R程序变成命令行程序
2. 如何把命令行程序搬上galaxy (知名的程序都有人搬好，但自己的程序还是需要学一下怎么配置的）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Galaxy可以说是低端生信从业者杀手，如果你的能力只是跑跑流程，galaxy完全可以取代你的工作。&lt;/p&gt;

&lt;p&gt;如果你是苦逼的生物研究生，苦于要自己分析数据，不会跑命令行程序，对各种参数表示晕菜，galaxy也是拯救你的神器，如同有个做生信的人在旁边帮助你，参数你点点菜单就可以了，跟程序变运行又可以了，流程自己都可以设计并一键运行。&lt;/p&gt;

&lt;h2 id=&#34;安装galaxy&#34;&gt;安装galaxy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;requirements: python 2.7 and git&lt;/li&gt;
&lt;li&gt;only three steps&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;克隆galaxy项目&#34;&gt;克隆galaxy项目&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/galaxyproject/galaxy/
cd galaxy
## switch to master branch, stable release
git checkout -b master origin/master
```   	




### 安装


```bash
cd galaxy/config/
cp galaxy.ini.sample galaxy.ini
```   	

编辑_galaxy.ini_文件

+ find the line: admin_users
+ remove the # and add an email for your account



### 运行

```bash
# go back to galaxy folder
cd ..
sh run.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以用浏览器打开&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;，使用galaxy，就是这么简单。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博士养成记</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/get-phd-degree/</link>
      <pubDate>Mon, 14 Aug 2017 10:30:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/get-phd-degree/</guid>
      <description>&lt;h2 id=&#34;期望中的博士生活是这样子&#34;&gt;期望中的博士生活是这样子&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/MISC/phd/2016-01-05 00.58.47.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;然而真实的生活却是&#34;&gt;然而真实的生活却是：&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/MISC/phd/2015-06-23 11.31.59.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>听说你有RNAseq数据却不知道怎么跑GSEA</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/prepare-genelist/</link>
      <pubDate>Thu, 10 Aug 2017 19:11:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/prepare-genelist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Dear GuangChuangyu,&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying to use the clusterProfiler package for GSE analysis on DGE data obtained from RNAseq.
While I can run enrichKEGG, I&amp;rsquo;m unable to run gseKEGG basically because I don&amp;rsquo;t know how to obtain an order ranked gene list.&lt;/p&gt;

&lt;p&gt;I work on R. I have a dataframe or matrix with gene names, log2 fold change values, pvalues and adjusted pvalues among others.&lt;/p&gt;

&lt;p&gt;How can I get the order ranked gene list to feed in gseKEGG?&lt;/p&gt;

&lt;p&gt;Moreover what is the more reliable way to obtain functional insight about each sample? enrichKEGG or gseKEGG?&lt;/p&gt;

&lt;p&gt;Thank you in advance for your help.&lt;/p&gt;

&lt;p&gt;best regards&lt;/p&gt;

&lt;p&gt;bruno saubaméa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天收到一封来自Université Paris Descartes的求助信，这个问题我被问过好多次了，显然很多新手都有这问题，根本不知道该怎么跑GSEA，搞不清GSEA的输入是什么。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>祝你们缠缠绵绵到天涯</title>
      <link>https://guangchuangyu.github.io/cn/2017/08/response-to-sciencenet-blog-post/</link>
      <pubDate>Tue, 08 Aug 2017 17:52:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/08/response-to-sciencenet-blog-post/</guid>
      <description>&lt;p&gt;薛宇这篇《&lt;a href=&#34;http://blog.sciencenet.cn/home.php?mod=space&amp;amp;uid=404304&amp;amp;do=blog&amp;amp;id=1069933&#34;&gt;BMC Systems Biology没有学术不端&lt;/a&gt;》写作水平还真是高啊，先来个不拉干的小事情，用了软件没引用，来铺垫并以此对抄袭事情进行定位/定性。再来一堆论据和结论不相关的逻辑来论证，好像很有道理的样子，不明真相（没有读我的4篇连载）的群众很容易就掉坑里了。&lt;/p&gt;

&lt;p&gt;首先讲了他和R教授的故事，那只不过是用了工具没引用而已，和抄袭是两码事！试图把抄袭写成与此类似的「忘记引用」！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;比方说我给R教授写信，就只是问有没有用我的工具。都是聪明人，话不需要说的那么透，点到为止就得了。那您要问，如果人家不回信或者耍赖说没用呢？很简单，三天不回信我会立马写信杂志社，说作者用了我的东西并且刻意没有引用也没有致谢，态度极其恶劣建议撤稿，并且把我三天前发的信抄给编辑作为证据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了把抄袭这种严重的事情与用了工具没引用这种简直太常见且不值一提的小事做类比，薛宇教授是用心良苦啊，把小事给说大了！&lt;/p&gt;

&lt;p&gt;这就是牛逼之处，我不得不服，用小事与大事类比，将大事说小！将小事说大，让大事化小于无形中。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有德国学者使用了GOSemSim的代码设计了预测蛋白质相互作用的工具IntScore，发表在2012年的核酸研究上，作者专门写了一节来介绍GO的语义学相似性并且标明引用，所以这篇文章符合学术规范，没有问题。我们再看看DOSim，这篇文章里注明了GO注释的分析使用的是GOSim并且加了引用，所以也没有问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这段话很有水平，首先是&lt;strong&gt;不对等类比&lt;/strong&gt;，以2012年NAR的符合学术规范的文章来类比一篇抄袭文章，试图化抄袭于无形中。&lt;/p&gt;

&lt;p&gt;我们来看所谓的一节&lt;strong&gt;专门介绍&lt;/strong&gt;和标明引用是怎样的：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有魔性的图来一发</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/magick-add-gif/</link>
      <pubDate>Fri, 28 Jul 2017 07:09:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/magick-add-gif/</guid>
      <description>&lt;p&gt;不知不觉中我已经介绍了很多R包，有学术上的&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483886&amp;amp;idx=1&amp;amp;sn=cb76891dff5787025f6b99cdcc723d86&amp;amp;chksm=ec43b0a9db3439bfcec1c9ac3c0d00e6190cf4d3d02d9d3dc767007e0ff68b4fbd8064bb0f77#rd&#34;&gt;ChIPseeker&lt;/a&gt;、&lt;a href=&#34;http://mp.weixin.qq.com/s/Uhx3l3lKQS88OJ4SHntkNg&#34;&gt;treeio&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483962&amp;amp;idx=1&amp;amp;sn=7240c1fe0e09a142ef95ac594922b890&amp;amp;chksm=ec43b37ddb343a6bc7c2633597aba751b7f257846d26bc0060b7782ecd3ae20fece8085f0295&#34;&gt;ggtree&lt;/a&gt;、
&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484374&amp;amp;idx=1&amp;amp;sn=f946f3539a752b09a94b5e160e87368e&amp;amp;chksm=ec43b291db343b871a1f10ca31d6ef94e9da4485043ed374c9739689d02072be92a34ca4e863#rd&#34;&gt;clusterProfiler&lt;/a&gt;、
&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484054&amp;amp;idx=1&amp;amp;sn=c9c45157bfb60d5143e5d467ebfe5a86&amp;amp;chksm=ec43b3d1db343ac74cbc7a4f0bbe8b9a09346c2becbce33e5f8c070b333a2195adb8741e9e82&#34;&gt;GOSemSim&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484018&amp;amp;idx=1&amp;amp;sn=53281ebf18b52518bc14dc83a0709bf9&amp;amp;chksm=ec43b335db343a23465208b47327088d054f8eed64f7d7137b09d01ca414c08fb17804fd19ce&#34;&gt;seqcombo&lt;/a&gt;和&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484054&amp;amp;idx=2&amp;amp;sn=9a42f1094349a0bd09a5e0b7c44595e0&amp;amp;chksm=ec43b3d1db343ac7e11d92eda3eb1837aab46f79bb109e6cdbba466e4693d041a87fa698ef1b&#34;&gt;MSnbase&lt;/a&gt;等，当然免不了有&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483948&amp;amp;idx=1&amp;amp;sn=e57e385ada66c991a5c3cf6eb48f7169&amp;amp;chksm=ec43b36bdb343a7dbd39574bb6b02cf8057a4d068399630e77e0580113a2807bb8c34edafbf0&#34;&gt;吐槽&lt;/a&gt;还有&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484640&amp;amp;idx=1&amp;amp;sn=478f77b8f03eb9793bafc8f18e126097&amp;amp;chksm=ec43b5a7db343cb11fc9e0c232e0de0db7ec444abf5e8e3bd703f83a3cb31695f10359b47b8f#rd&#34;&gt;抄袭&lt;/a&gt;。&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484641&amp;amp;idx=1&amp;amp;sn=3ff11eef4cf48ebc6c2d1b06be950834&amp;amp;chksm=ec43b5a6db343cb04355c149b52bbd9bcb11b7983e48ddb5d40b85081003937d5e582b0f69b5&#34;&gt;有学R的&lt;/a&gt;和&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484173&amp;amp;idx=1&amp;amp;sn=ad1817e4acd1362428b3beaa1cd4fede&amp;amp;chksm=ec43b24adb343b5cad6c7ff528182e9c95f0f292044399e127d7495c77bbe2e1cbccb095179c&#34;&gt;更新R包&lt;/a&gt;，也有&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484109&amp;amp;idx=1&amp;amp;sn=9988b955cb4a995dfcfbe31f31d929da&amp;amp;chksm=ec43b38adb343a9cc2ce4ab9fabf3e6ff1db82f6627c91a1035ef94279c6d51e72ffea247f1a&#34;&gt;桌面小工具&lt;/a&gt;，还有画图的&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483941&amp;amp;idx=1&amp;amp;sn=bb352b5d74797715a9759f64765e49f6&amp;amp;chksm=ec43b362db343a7433d23dd081da263a062e944664ced85d82643eb6e963bccc5d35b43617a8#rd&#34;&gt;ggplot2&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483955&amp;amp;idx=1&amp;amp;sn=0b753422e337e8dd63056d62af9b9e80&amp;amp;chksm=ec43b374db343a62b102a22bc1ebc288c5c4c0ac27db4228bd5214b54b59fa20a948348cebdd&#34;&gt;怎么配色&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484079&amp;amp;idx=1&amp;amp;sn=2f37b54ad09b966ccb9e8bf93ebd6643&amp;amp;chksm=ec43b3e8db343afed5d55c25aaaba233f3339686e9eba0e65f004a5ca58ac13bba7ba9b5bacc#rd&#34;&gt;嵌入图片&lt;/a&gt;(比如pokemon)， 以及&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484416&amp;amp;idx=1&amp;amp;sn=c089403a2b8ab03d241b6d99ef138f50&amp;amp;chksm=ec43b547db343c51bdae5f76b399072629720cf646ddc1c0b758c7c76d57e8b1e35b47221cf6&#34;&gt;emoji作图&lt;/a&gt;，也有好玩的&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484504&amp;amp;idx=1&amp;amp;sn=9ce4f3f59d41a27ec3f14c6e77f29a75&amp;amp;chksm=ec43b51fdb343c097ebdaf29ca1eef27c4ea2405555ea2a685f2815c212e93afa337886e1a23&#34;&gt;贴纸&lt;/a&gt;和&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483868&amp;amp;idx=1&amp;amp;sn=412e13481ad636032125a035bf2216b0&amp;amp;chksm=ec43b09bdb34398d060b1898d286b84975e578c1230da0ce2782d56278a6ce0ee95c0965ac5d&#34;&gt;装逼利器&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天要介绍另外一个R包，magick，是R里面玩图片的利器，今天要讲的是在静态图片上加动态图片，这样我们平时画一些学术的图，就可以加点搞笑的动态元素上去，有利于在博客和公众号上装逼。&lt;/p&gt;

&lt;p&gt;无非是给我一张静态图当背景，再来一张动态图加在上面，为了让代码可以重用，首先打包个小函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;add_gif &amp;lt;- function(bg_file, gif_file, out_file, offset, bg_size=&amp;quot;500&amp;quot;, gif_size=&amp;quot;150&amp;quot;) {
	library(magick)
	p &amp;lt;- image_read(bg_file)
	g &amp;lt;- image_read(gif_file)
	g &amp;lt;- image_scale(g, gif_size)

	background &amp;lt;- image_background(image_scale(p, bg_size), &amp;quot;white&amp;quot;, flatten = TRUE)

	frames &amp;lt;- lapply(g, function(frame) {
  		image_composite(background, frame, offset = offset)
	})

	animation &amp;lt;- image_animate(image_join(frames))
	image_write(animation, out_file)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以来玩了，首先用上次讲到的dotplot做为底图，再从网上找一个动图，调用函数，bingo:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>听说你也在画dotplot，但是我不服!</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/clusterprofiler-dotplot/</link>
      <pubDate>Thu, 27 Jul 2017 07:05:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/clusterprofiler-dotplot/</guid>
      <description>&lt;p&gt;陈同的‘生信宝典’公众号出了篇《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&amp;amp;mid=2247483978&amp;amp;idx=1&amp;amp;sn=e0c158c0e92375553036cc37f4987e40&amp;amp;chksm=ec0dc7c0db7a4ed6ac593493b7d8b52f11f2feb92d24fa00d19527fbb6f95b24f7e313ef9440#rd&#34;&gt;R语言学习 - 富集分析泡泡图&lt;/a&gt;》，搞个shell脚本，一步绘图。讲了这个脚本可以适用于clusterProfiler和其它软件的富集结果。&lt;/p&gt;

&lt;p&gt;浑身都是硬伤，我都不想吐槽，但由于作者邀请我提点，那就吐槽模式全开。&lt;/p&gt;

&lt;h2 id=&#34;一个command出图-小白已经哭晕&#34;&gt;一个command出图，小白已经哭晕&lt;/h2&gt;

&lt;p&gt;从出的图看，应该是ggplot2画的（就算猜错，要吐槽的依然正确），小白在web-server上做了分析，存结果为xls文件，拿你这脚本，一跑报错。读xls文件（别告诉我你跟用户说读xls但其实是个tsv）和画图的依赖关系没解决！用户友好在那里？不要告诉我你的脚本0依赖，有个shell就能跑，即使我们熟悉的各种命令，很多都是独立程序，不关shell什么事。&lt;/p&gt;

&lt;h2 id=&#34;所谓的一步出图&#34;&gt;所谓的一步出图&lt;/h2&gt;

&lt;p&gt;既然讲了clusterProfiler，那么clusterProfiler用户笑而不语了。我们用dotplot不也是一条命令出图，为什么要退出R，去跑你的shell脚本，这过程还得转换数据，存储数据。最后的这一步，是前面+N步为代价的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>听说你也在读文献</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/ferret/</link>
      <pubDate>Wed, 26 Jul 2017 07:05:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/ferret/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/MISC/noidea.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;做为生物狗，我时常不知道自己在干什么，包括读文献，费了老大劲读一篇文献，然后经常也不明白人家在说什么。懒人需要借助神器，本公众号已经介绍了好几个神器，江湖传说收集7大神器，可以召唤出paper，渡自己毕业。&lt;/p&gt;

&lt;h2 id=&#34;拿到一篇文献-先问一句-牛逼吗-靠谱吗&#34;&gt;拿到一篇文献，先问一句，牛逼吗？靠谱吗？&lt;/h2&gt;

&lt;p&gt;我拿ARID1A去pubmed搜，第一篇文章《ARID1A-mutated ovarian cancers depend on HDAC6 activity》为例，2017年7月24号才上线的文章，请看下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2017/ferret/Screenshot 2017-07-26 19.31.32.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;IMPACT这里有期刊的影响因子20分，文章在社交网站上传播指数Altmetric 54分，文章在文献管理Mendeley中被收藏2次。这是3天前的文章，所以指数还不高，试想一下，文章传播越广，收藏人数越多，必定也就越重要，这给了我们评估文章的第一印象。这是3天前的文章，所以没有引用，如果有文章引用，这个神器还会列出来呢。&lt;/p&gt;

&lt;p&gt;注意到AUTHORS没有？如果作者有ORCID主页的话，直接链接过去，我们可以去看作者们的publication列表、教育背景、工作经历等信息，牛人为自己带盐，牛人的文章我们更愿意相信。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搞大你的点，让我们画真正的气泡图</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/scale-size/</link>
      <pubDate>Tue, 25 Jul 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/scale-size/</guid>
      <description>&lt;p&gt;在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484089&amp;amp;idx=1&amp;amp;sn=f6e11d54a18e96a94145a2b802c37dc1&amp;amp;chksm=ec43b3fedb343ae89e3630900033f055af4bbe211897076291e351ae18cc89b2ddf7651ee0be#rd&#34;&gt;ggplot2字体溢出的那点破事&lt;/a&gt;》一文里，我介绍了字体溢出的解决方案。在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483972&amp;amp;idx=1&amp;amp;sn=fa1f4b6299f94eeb52baf5bda6a5ff6b&amp;amp;chksm=ec43b303db343a150806b3b1ab22a1df1c90405235bb399b155f7c50de2a0a23faf2f4ad0beb#rd&#34;&gt;wrapping labels in ggplot2&lt;/a&gt;》一文中介绍了怎么把长文本截断自动换行，这些都是非常常见的问题，最近关于溢出就又有人提问了：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>非模式基因GO富集分析：以玉米为例&#43;使用OrgDb</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/clusterprofiler-maize/</link>
      <pubDate>Mon, 24 Jul 2017 08:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/clusterprofiler-maize/</guid>
      <description>&lt;p&gt;模式生物做什么都简单，非模式生物则很多缺少注释，没有注释你就没法做，只能是借助于各种软件比如blastgo，自己跑电子注释。但今天要讲的不是这种情况，很多物种还是有注释的，只是你有时候不知道该去那里下载，或者你有数据，却不知道该怎么用！很多的软件都是针对模式生物的，或者针对某一些类型的非模式生物，能够支持多种非模式生物，能够支持用户自己的注释文件的软件相对来讲，就非常少有了，然而clusterProfiler就是这类少有的软件之一。&lt;/p&gt;

&lt;h2 id=&#34;获得orgdb&#34;&gt;获得OrgDb&lt;/h2&gt;

&lt;p&gt;今天要讲的是通过OrgDb来做GO分析，这是clusterProfiler的&lt;strong&gt;enrichGO&lt;/strong&gt;函数所支持的背景注释，Bioconductor自带20个OrgDb可供使用，多半是模式生物，难道我们要做的物种不在这20个里面就不行了吗？显然不是的，clusterProfiler能支持的物种我自己都数不过来。&lt;/p&gt;

&lt;p&gt;我们可以通过AnnotationHub在线检索并抓取OrgDb，比如这里以玉米为例：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>听说你想学R</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/swirl/</link>
      <pubDate>Sun, 23 Jul 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/swirl/</guid>
      <description>&lt;h2 id=&#34;先来点八卦&#34;&gt;先来点八卦&lt;/h2&gt;

&lt;p&gt;当年学R的时候，并没有现在这么多的书籍，老用户一般都知道丁国徽，因为他翻译了诸如《R导论》之类的文档，属于最早的中文材料了。跟生物狗有关的中文书有两本，一本是《R语言及Bioconductor在基因组分析中的应用》，这本我在2006年的时候看过，被坑大发了，里面逻辑混乱、错误满篇。&lt;/p&gt;

&lt;p&gt;以下这段豆瓣书评可以说很好的总结了这本书 &lt;a href=&#34;https://book.douban.com/review/3017404/#comments&#34;&gt;https://book.douban.com/review/3017404/#comments&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;首先，打开前言，读者们会发现“编写本书，参加这些工作的教师和研究生有15人之多”。当然，名字后面带头衔的最后都在出现在封面了。也就是说由12位&amp;rdquo;无名的岳武穆“研究生同学造就了3名”有名的岳武穆“之砖家叫兽。&lt;/p&gt;

&lt;p&gt;然后，本书共24章，模12为零，当然，这只是一个巧合，只是暗合天命罢了。&lt;/p&gt;

&lt;p&gt;最搞笑的就是这本书的编排和审校，十分差，许多小错误，就好像从没有审过一样。&lt;/p&gt;

&lt;p&gt;譬如第13页上，对order()函数的介绍，居然有这么句绕口令“x[order(x)]等效于order(x)&amp;ldquo;,当然其实等效的是 sort(x).&lt;/p&gt;

&lt;p&gt;其他的诸如第17页上&amp;gt;=的打印错误，就不一一细表了。&lt;/p&gt;

&lt;p&gt;最搞笑的就是只有三页的第4章，在数组、函数的介绍之前，就开始讲“聚集计算”！！！然后再来讲解语言基本的语法。。。。
这种“由深入浅，化简单为复杂，化复杂为天书”之功力，更让吾辈叹服砖家叫兽吞云吐雾之神功。&lt;/p&gt;

&lt;p&gt;作为一本实例讲解的书，根本就没有提供源码和实例样本，也就说，根本就是没头没脑的演示。有点专业精神好么，好歹也是本标价68的书，当然只有400页草纸， 本科生水平的语言文档翻译。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我像是一颗棋子，进退任由你决定</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/un-fucking-believable/</link>
      <pubDate>Fri, 21 Jul 2017 21:51:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/un-fucking-believable/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;we’re talking about people who already are skating on the ethical edge (as scientists, we should always respond to serious criticism; if we don’t, that’s bordering on ethical violation already) &amp;ndash; &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/&#34;&gt;Andrew Gelman&lt;/a&gt;对此事的评论&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我原以为邓岳是个学生，我的本意是要给他一个教训，制止这种行为，我不出来给他这个教训，早晚他也会为自己的投机付出代价，而且如果以后出现多次抄袭，直接会导致无法继续在学术界生存。后来我发现他还是个讲师，我觉得更不应该了，编辑部必须要对这件事做出处罚。这就是我的本意，让邓岳认识到错误，并为此付出应有的代价。&lt;/p&gt;

&lt;h2 id=&#34;搞得我像祥林嫂一样到处找人说&#34;&gt;搞得我像祥林嫂一样到处找人说&lt;/h2&gt;

&lt;p&gt;然而&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=bcb696bba156bc433cae638a461bdcdb&amp;amp;chksm=ec43b58ddb343c9b546cf7c4b3d032da610ce89d0b8c1778cb723cf74cdfa11c11bbedf3557a#rd&#34;&gt;编辑一直不做为&lt;/a&gt;，就逼得我只能借助于舆论，我本无意于去网上传播这件事，我写的博客，都是针对编辑部，最后我对编辑提议的处理方式表达不满之后，编辑就&lt;strong&gt;消失了&lt;/strong&gt;，再也不回应邮件。我只能再写博客，再发动舆论，联系之前高调出来说撤稿了43篇文章的那些编辑，推特上也骚扰他们。微博上也AT西电官方微博，求转发之类的。虽然我没有想去闹大事情（尼马我也不想花时间扯这些蛋啊），但BMC就是逼着我跟他斗，而事情闹越大，对抄袭的人来说，越是不利，搞不好学术界就不用混了。谁都不傻，所以终于坐不住给我写信。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/Bioconductor/GOSemSim/2017-07-20-001828_1280x800_scrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;其中说到“1、2月份和您邮件沟通”，只是说了按照CRAN policy改了代码，并把我列为作者，而后面我回应把我名字从软件包作者中去掉而已。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他的邮件大概讲了和编辑并无操作，软件包已经按要求更新，犯错是源自于无知。&lt;/p&gt;

&lt;h2 id=&#34;这事最后怎么处理&#34;&gt;这事最后怎么处理？&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>辣眼睛，一篇抄袭引发的系列血案！</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/plagiarism-chain/</link>
      <pubDate>Thu, 20 Jul 2017 21:51:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/plagiarism-chain/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;50%的利润,它就铤而走险；&lt;/p&gt;

&lt;p&gt;100%的利润,它就敢践踏一切人间法律；&lt;/p&gt;

&lt;p&gt;300%的利润,它就敢犯任何罪行,甚至绞首的危险.&lt;/p&gt;

&lt;p&gt;&amp;ndash;马克思 《资本论》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/hposim_dosim/hposim_paper.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ppiPre抄袭GOSemSim，然后我发现他还发了一个叫HPOSim的R包，又是语义相似性度量，我的第一反应是必须还抄我的，他要是有能力写出来，就不会抄GOSemSim了。然而我看了一下代码，确实不是抄我的！&lt;strong&gt;这他妈就奇了怪了!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;必须还是抄的&#34;&gt;必须还是抄的！&lt;/h2&gt;

&lt;p&gt;做语义相似性度量也就那么几个包，我看了一遍之后，发现&lt;strong&gt;HPOSim&lt;/strong&gt;抄了&lt;strong&gt;DOSim&lt;/strong&gt;，你妹啊，用心良苦，同样/相似的东西换不同的包来抄！抄袭惯犯了，事实证明，走捷径的人，是不可能好好走路的，一旦尝到了甜头，必然是铤而走险！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下两个截屏，大家感受一下，左边是HPOSim，右边是DOSim：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Editor你的良心不会痛吗？</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/bmc_plagiarism_2/</link>
      <pubDate>Wed, 19 Jul 2017 21:51:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/bmc_plagiarism_2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;抄袭的是&lt;strong&gt;西安电子科技大学&lt;/strong&gt;的讲师，靠着两三篇抄袭的文章，已经是副教授了。&lt;/p&gt;

&lt;p&gt;这种抄袭的事情就应该暴光，这个事件中，更可恶的是BMC，BMC这种保护抄袭的行为更应该暴光，大家不要再给BMC送钱了，还不如发PLoS One。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;公众号有人评论说：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/GOSemSim/WechatIMG2.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这竟然也被捕捉到了，确实他在2012年的时候，就在copy我的代码，然后打R包的时候，还请教了我：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/GOSemSim/ppiPre_dengyue.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;抄了我的代码-之后厚颜无耻地感谢我说学了很多东西-他的良心真的不会痛吗&#34;&gt;抄了我的代码，之后厚颜无耻地感谢我说学了很多东西，他的良心真的不会痛吗？&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/EvsmQokxE8wi4/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>学术期刊的学术不端，你见过吗？</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/bmc_plagiarism_1/</link>
      <pubDate>Tue, 18 Jul 2017 21:51:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/bmc_plagiarism_1/</guid>
      <description>&lt;h2 id=&#34;编辑部的恶才是最大的恶&#34;&gt;编辑部的恶才是最大的恶！&lt;/h2&gt;

&lt;p&gt;大家是否还记得2015年BioMed Central高调地撤稿了43篇文章，站在道德制高点对审稿过程进行了指责，吐了学术不端一脸口水？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/screenshots/Screenshot 2017-07-17 19.34.25.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就在这个时候，我写信去&lt;strong&gt;BMC Systems Biology&lt;/strong&gt;告别人抄袭，编辑部信誓旦旦，他们对这种事情是非常认真对待的，然而接下来的剧情却反转了，在我证据甩他们一脸的时候，他们拖着不处理，拖多久呢，&lt;strong&gt;超过1年！&lt;/strong&gt;一直在给抄袭者洗地，最好在没有告知我的情况下，静悄悄地出了个所谓的&lt;strong&gt;erratum&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;erratum是什么？字典里这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;erratum |ɛˈrɑːtəm|
noun (pl.errata |ɛˈrɑːtə| )
an error in printing or writing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我告的是抄袭，plagiarism:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plagiarism |ˈpleɪdʒərɪz(ə)m|
noun [ mass noun ]
the practice of taking someone else&#39;s work or ideas and passing them off as one&#39;s own. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;结果-plagiarism-到了编辑部那里变成了-erratum&#34;&gt;结果&lt;strong&gt;plagiarism&lt;/strong&gt;到了编辑部那里变成了&lt;strong&gt;erratum&lt;/strong&gt;.&lt;/h3&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>度娘才是最大的老司机</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/baiduyun/</link>
      <pubDate>Mon, 17 Jul 2017 13:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/baiduyun/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Linux是生信从业者最好的操作系统，我觉得对新手最大的安利是大家常用的软件都可以在linux上爽快地用！之前介绍了&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484544&amp;amp;idx=1&amp;amp;sn=f22444670bec8505090cf377de98b6f4&amp;amp;chksm=ec43b5c7db343cd1f7b3e516e7110f7aa25d11cc6c7fd741808cf70548a1d0e4a3cb76aa9236#rd&#34;&gt;QQ&lt;/a&gt; 、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484423&amp;amp;idx=1&amp;amp;sn=311c627bb70e6fc626bb1f014ec0a976&amp;amp;chksm=ec43b540db343c56fb01f86851c0a4b685351b860d0c9ac2f9709857428b4b76b85bf2bc8b49&amp;amp;scene=21#wechat_redirect&#34;&gt;微信&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484004&amp;amp;idx=1&amp;amp;sn=ef769333f07137b83daf9f338ec18eba&amp;amp;chksm=ec43b323db343a35da859d08110d480296b3c95a99240b0ea7336ffbdfd465ef59e6f92d67ff#rd&#34;&gt;迅雷&lt;/a&gt;，这次将介绍度娘的网盘云管家。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;老司机带带你&#34;&gt;老司机带带你&lt;/h2&gt;

&lt;p&gt;各种音乐客户端我都没装，看到朋友圈有分享音乐的，偶尔手贱点进去，通常都会弹出来说告诉我，我所在的区域不支持！尼玛！这世界除了翻墙之外，还有翻回去的，到了墙内网络上音乐、视频才可以听可以看。某一天我想下个专辑放手机上吧，网络上各种搜索，都无法下载，各种会员制、付费、论坛经验值神马的，于是我怒了，找了个磁力链，扔给度娘，度娘&lt;strong&gt;1秒钟&lt;/strong&gt;就给我下好了，你没看错，度娘下东西是秒下！&lt;/p&gt;

&lt;p&gt;Linux上链接有软链接和硬链接之分，软链接就是大家熟悉的’快捷方式‘，而硬链接则是真正意义上的物理指向，所有链接都是真实的，但电脑上有一份拷贝，但凡有一个链接还存在，文件就存在。云盘肯定是类似这样的‘硬链接’，你把别人云盘里的资源保存在你的云盘里，它消耗了你的空间，而实际上对于云盘供应商，零消耗！云盘里有大量的资源，什么东西能吸引用户？色情、电影、盗版软件这些绝对占大头，度娘给了大家下载BT的功能，现在又有下载磁力链的功能，简直分分种满足宅男所有愿望！但凡你要下的东西是存在于度娘的云盘里的，它瞬间就可以给你一个硬链接，所以下东西都是秒下！&lt;/p&gt;

&lt;p&gt;之前有师弟在微信群里问那里可以下到illustrator，被我笑说做为汉子怎么好意思在群里问师姐下盗版，不会下也默默地上淘宝买啊，也就几块钱的事。其实这些上网随便找个BT或磁力链，交给度娘，秒下。即使是很老的BT种子，已经没源了，度娘也是秒下。度娘才是最大的老司机，从此你不再也没理由看不到小电影、看不到盗版碟、下不了盗版软件、听了不盗版专辑。度娘喊你上车！一次满足你所有愿望！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你的专业是那一只Pokémon神兽？</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/pokemon/</link>
      <pubDate>Thu, 13 Jul 2017 10:06:59 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/pokemon/</guid>
      <description>&lt;h2 id=&#34;啥都不说-先上图&#34;&gt;啥都不说，先上图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/ggimage/1208212267.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sci-hub如果挂了，你还有神器下文献吗？</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/unpaywall/</link>
      <pubDate>Tue, 11 Jul 2017 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/unpaywall/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483956&amp;amp;idx=1&amp;amp;sn=16df120e86b3e66395ce69c3abf76715&amp;amp;chksm=ec43b373db343a6581301f52c923c7506e0f0789d5f0792fbf59da44f8b29b833cdbc46ddfc2#rd&#34;&gt;如何获取文献&lt;/a&gt;》一文中，我介绍了获取文献的方方面面，从搜索、文献管理、订阅、个性人推荐到下载。本文再继续说说文献下载神器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sci-hub无疑现在是很多苦逼科研工作者所依赖的最大神器，然而最近败诉给爱思唯尔出版社，赔1500万美元，这点钱显然是不能够搞垮sci-hub的，但是&lt;strong&gt;败诉&lt;/strong&gt;本身给大家带来的信号对sci-hub的影响会更大，必须更大！美国化学学会几天前也发起了对Sci-Hub的诉讼！sci-hub很有可能在败诉的影响下，被群起而攻之，最终被各大出版社给掐死。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>joyplot：一种波涛汹涌，哦不对，是山峰叠峦的可视化方式</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/ggjoy/</link>
      <pubDate>Tue, 11 Jul 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/ggjoy/</guid>
      <description>&lt;p&gt;最近推特上在讨论的一种叫做joyplot的作图方式，如果我们按照正常的画法，这些分布会重叠在一起，不容易看。而这种joyplot，有一种山峰叠峦的即视感：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/ggjoy/Screenshot 2017-07-11 16.37.22.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux中使用QQ</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/wine-qq/</link>
      <pubDate>Sun, 09 Jul 2017 07:57:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/wine-qq/</guid>
      <description>&lt;p&gt;之前在写《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484423&amp;amp;idx=1&amp;amp;sn=311c627bb70e6fc626bb1f014ec0a976&amp;amp;chksm=ec43b540db343c56fb01f86851c0a4b685351b860d0c9ac2f9709857428b4b76b85bf2bc8b49#rd&#34;&gt;开源的macOS和linux版微信&lt;/a&gt;》时，有小伙伴问怎么搞QQ，做为一个上了年纪的人，我已经不怎么用QQ了。&lt;/p&gt;

&lt;p&gt;QQ跑Linux基本上无解，疼讯说好的Linux版死了好多年，现在只有WebQQ可以用。如果你们早生几年，就会遇到Linux上用QQ的好时代。在《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484265&amp;amp;idx=1&amp;amp;sn=7e184d6bf26d2b91485cab0aec3102b8&amp;amp;chksm=ec43b22edb343b38586fa21db0831df49bfe4e0106b22c5c0d93afe16dda88dc1a1a6e5d5248#rd&#34;&gt;十年前截屏&lt;/a&gt;》一文中，我就晒过在Gentoo上跑用Java开发的LumaQQ，在NetBSD上跑用C++开发的Eva，这些都极好用，而且像当年QQ上好友纷纷隐身的时候，LumaQQ推出了如来神掌，你可以看到谁是隐身的，以至于有些Windows用户也去用LumaQQ，那是当年最美好的时代，然而这些都死掉了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SCIENCE文章用了DAVID被吐槽</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/david-clusterprofiler/</link>
      <pubDate>Thu, 06 Jul 2017 05:44:27 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/david-clusterprofiler/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/clusterProfiler/DAVID/science.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好端端的一篇文章，因为用了DAVID，在PubPeer上就被吐槽了：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么？听说你有文章却不知道该往那里投！</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/jane/</link>
      <pubDate>Sun, 02 Jul 2017 02:22:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/jane/</guid>
      <description>以下这些情况是否在你的科研生活中出现，并给你一定的困扰：
 你想投文章，却不知道该投什么杂志？ 你在写文章中，想找一篇相关的文章来引用？ 如果你是Editor，想为文章找审稿人？  这些问题特别是第1点一定给做科研的人带来了困扰，当然首先你得有manuscript（说多了都是泪）。
这时候我们需要一款神器，JANE：Journal/Author Name Estimator， http://jane.biosemantics.org/。你可以用关键字、标题或摘要来搜索，可以搜索作者、文章和期刊。搜索结果按照相似度给出。
文章投什么杂志 拿自己的摘要去搜期刊，可以找到相似的工作都发表在什么杂志上，这对于我该投什么杂志有参考和指导意义。
找相关文章来引用 这时候把要引用的内容拿来搜文章，相关的文章就搜出来了。
找审稿人 拿别人投稿的摘要来搜作者，轻而易举就找到了相关发表类似工作的作者，联系一下是否愿意审稿，方向性很强，节省了大家的时间，也容易找到专业人士来审。
实例 最后用我DOSE的文章摘要做为实例，copy-paste到搜索框，这里我点击搜期刊：
我自己的文章就搜出来了，然后还有一些相关的文章，也是发表在Bioinformatics上，第二个相似度高的期刊是BMC Bioinformatics，再没有理由说不知道文章该投哪里了吧？！
最后的最后，只想问一句，能来个共一吗？</description>
    </item>
    
    <item>
      <title>R的N种打开方式</title>
      <link>https://guangchuangyu.github.io/cn/2017/07/r-gui/</link>
      <pubDate>Sat, 01 Jul 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/07/r-gui/</guid>
      <description>&lt;p&gt;RStudio太成功，以至于有些新手只知有RStudio，不知有R。在&lt;a href=&#34;https://guangchuangyu.github.io/2015/11/r-kernel-in-jupyter-notebook-3/&#34;&gt;R kernel in Jupyter notebook 3&lt;/a&gt;和&lt;a href=&#34;https://guangchuangyu.github.io/2014/12/auto-complete-in-ess/&#34;&gt;auto-complete in ESS&lt;/a&gt;两篇文章中，我介绍了在Jupyter和Emacs里使用R。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/screenshots/Screenshot%202015-11-04%2010.54.29.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2分面之像素艺术</title>
      <link>https://guangchuangyu.github.io/cn/2017/06/turkey_facet/</link>
      <pubDate>Fri, 30 Jun 2017 09:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/06/turkey_facet/</guid>
      <description>&lt;p&gt;《&lt;a href=&#34;https://guangchuangyu.github.io/cn/2017/06/geofacet/&#34;&gt;按地理位置分面&lt;/a&gt;》这篇文章中，最后我故意把美国地图拖成心型，我知道你们没看懂，大家用一样的软件，有些人只会照着文档来，有些人却能够超越文档，做出作者都没想到的事情。像这个心型排版的美国各州，诚然是没有什么意义的，可以说是瞎扯蛋了，但这里我其实隐藏了一个我想表达但没说出来的信息，抛开地理信息，这个包可以很好玩，我想这一点，可能连作者也没想到，因为作者说了他的想法来自于statebins包，他一心想要做地理位置分面。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;然而看到这个心型，难道你在感觉瞎搞的时候，心中没闪过一个念头？这玩意可以瞎搞！瞎搞！瞎搞啊！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一大波ggtree贴纸来袭</title>
      <link>https://guangchuangyu.github.io/cn/2017/06/ggtree_sticker/</link>
      <pubDate>Wed, 28 Jun 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/06/ggtree_sticker/</guid>
      <description>&lt;p&gt;还记得《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247483679&amp;amp;idx=1&amp;amp;sn=e9038cdaeb776355becba5ccfa01b501&amp;amp;chksm=ec43b058db34394ed7afc20c246e1b664fe3b1d54e07b7c92b26bfcf292a46879926a4697a5a&amp;amp;scene=21#wechat_redirect&#34;&gt;ggtree hex sticker&lt;/a&gt;》一文吧？画了几个六角贴，纯代码生成。时隔半年，原来的ggtree已经分成了&lt;code&gt;treeio&lt;/code&gt;和&lt;code&gt;ggtree&lt;/code&gt;两个包，而我也做了这两个包的六角贴，终于我花了289美元印了一大波贴纸+磁贴。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/hexSticker/WechatIMG12.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>按地理位置进行分面</title>
      <link>https://guangchuangyu.github.io/cn/2017/06/geofacet/</link>
      <pubDate>Mon, 26 Jun 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/06/geofacet/</guid>
      <description>&lt;p&gt;CRAN刚上线的新包&lt;code&gt;geofacet&lt;/code&gt;，可以让ggplot2分面按指定的地理位置来，比如下面的数据，美国各州各项指标的排名：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  head(state_ranks)
    state   name   variable rank
1    AK Alaska  education   28
2    AK Alaska employment   50
3    AK Alaska     health   25
4    AK Alaska     wealth    5
5    AK Alaska      sleep   27
6    AK Alaska    insured   50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们正常画图是这样子的：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux装windows的二逼</title>
      <link>https://guangchuangyu.github.io/cn/2017/06/lxde-theme/</link>
      <pubDate>Mon, 19 Jun 2017 07:57:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/06/lxde-theme/</guid>
      <description>&lt;p&gt;做为一个上了年纪的人，显然已经离不开微信了，macOS还好，企鹅还有照顾到，但linux难道就只能用web版吗？显然不应该的。&lt;/p&gt;

&lt;p&gt;如果你是Arch Linux用户的话，那么aur源里已经有好几个款式可以选了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; ygc  ~  yaourt -Ss wechat
aur/electronic-wechat 2.0-2 (8) (1.29)
    A better WeChat client
aur/electronic-wechat-bin 2.0-1 [installed] (3) (0.36)
    A better WeChat on macOS and Linux. Built with Electron by Zhongyi Tong.
aur/electronic-wechat-git 1.4.0.43.gb18ff6d-1 (6) (0.00)
    An Electron application for WeChat
aur/franz-bin 4.0.4-5 (86) (12.73)
    Franz is a free messaging app / former Emperor of Austria and combines 
    chat &amp;amp; messaging services into one application. Franz currently supports 
    Slack, WhatsApp, WeChat, HipChat, Facebook Messenger, Telegram, Google 
    Hangouts, GroupMe, Skype and many more.
aur/wechat-web-devtools-git 0.17.171900-1 (1) (0.78)
    Wechat Web Developer Tools
aur/wechatircd-git r85.bb8f354-1 (0) (0.00)
    IRC server capable of controlling Web WeChat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我要介绍的是electronic-wechat。我比较懒，用下面的代码，安装二进制版：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yaourt -S electronic-wechat-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>纯文本可视化FASTQ质量数据</title>
      <link>https://guangchuangyu.github.io/cn/2017/06/quality_bar_fastq/</link>
      <pubDate>Tue, 06 Jun 2017 07:57:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/06/quality_bar_fastq/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2017/Screenshot 2017-06-02 14.15.14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一早曾老师就来发github repo，虽然有意思，但在我看来就是乱用emoji，用一个人类不可读（你怎么能够记住表情如何与数值对应上？！）来表示另一个人类不友好（质量编码）的数据，这绝对不是个好主意。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>怀疑人生！我没欠你们钱，好吗？</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/xiaomiquan/</link>
      <pubDate>Tue, 30 May 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/xiaomiquan/</guid>
      <description>&lt;p&gt;写了十几年的博客，虽然好早之前就发现一些博客文被《生信人》公众号抄了，但一直不愿意开公众号，去年年底尝试开个公众号，原创保护不给别人抄倒不是主要，而是我感觉到公众号已经绑架了中国人的阅读入口，可以尝试把博客文搬上来，这样大家可以在微信里搜到文章，有利于传播嘛。而我不是单纯为传播知识而来，而主要是推送我自己的东西，这在《为什么要开这个公众号》一文中已经讲了，维护我写的几个软件，花掉大量的时间，现在给我发邮件问问题，我基本都会让他们去biostars或bioconductor论坛上去问，公开交流有利于别的用户参与/学习，有助于减少重复解答，我也不断完善文档，很多问题其实在文档里都有答案，但人的天性就是懒、不愿学习（我在ggtree发布的第一篇文章里也提及了这点，说了%&amp;lt;+%操作符就是给懒人用的）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开源的macOS和linux版微信</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/electronic_wechat/</link>
      <pubDate>Mon, 29 May 2017 07:57:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/electronic_wechat/</guid>
      <description>在开源的macOS和linux版微信一文中，观众想知道怎么装windows，应你们的需求，来一发。
见过我2007年以前截屏的话，都会发现gnome和kde没出现过，我喜欢轻量的wm和软件，当年xfce出来的时候，号称轻量，其实也是中级以上，gnome2本身很轻量(gnome3我就不知道了），它给人重量都怪nautilus太慢。后来出现了lxde，才是符合我标准的集易用与轻量一身的桌面，lxde轻量到什么程度？能跑win98的电脑都可以流畅跑lxde！
LXDE本身就像极了windows经典桌面，而windows界面，大家（起码我是）最爱的还是经典界面，windows 2000是最高水平！虽然土灰土灰的，谁用谁知道，如果长时间盯屏幕，这种土灰土灰的界面，眼睛最不容易累！
LXDE因为本身菜单和自带的软件，都对windows用户极其友好，所以其实已经很像了。如果你想它再像一点，你可以把图标搞成windows的，比如archlinux的aur源里就有windows 95的图标，这逼就装得有点过了。
$ yaourt -Ss classic95 aur/classic95-icons 1-1 [installed] (3) (0.09) Classic icon set from Windows 95  再者就是gtk主题，自带的Redmond，就是windows经典的土灰，最后就是开始菜单，你只要找一个windows开始菜单按纽的图片，大功告成。
就是这么简单!
要想装win7，win8这样比较现代化的界面，我推荐一个主题包: https://github.com/nhermosilla14/WinAte，自带win7、win8主题，桌面壁纸、鼠标主题、图标等。
而且这个主题包还附送了各大系统的logo，也就是开始菜单的图标，你可以装成别的系统，请随便装：</description>
    </item>
    
    <item>
      <title>emojifont公众号文章</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/emojifont%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sun, 28 May 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/emojifont%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/</guid>
      <description>&lt;p&gt;最近看一个画图的公众号，基本上通篇是代码，最后上个图，我觉得作者就只想表达「哇，我好牛逼」，读者看完可能也只是发出一句「好牛逼」，然后就没有然后了。且不说他读的数据是他电脑上的，你拿了代码也不好重复，最主要是代码死长，缺少解释！&lt;/p&gt;

&lt;p&gt;我的写作风格则不一样，一篇文章我一般只会讲解一个点，力图讲清楚，让别人看明白。比如&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484186&amp;amp;idx=1&amp;amp;sn=d41ee81398a8c18d07e3b1ffe680d521&amp;amp;chksm=ec43b25ddb343b4b87254521c6c134513a3b3535d28064d2bf71d37f9183948895056151c8d0&amp;amp;scene=21#wechat_redirect&#34;&gt;bootstrap分段标记&lt;/a&gt;这一篇，代码足够短且简单，但我还是分模块来讲，一行画树，一行做bootstrap分段标记，最后一行修图，虽然三行，但按功能分开，再加上文字解释，读懂是必须的。再比如&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI5NjUyNzkxMg==&amp;amp;mid=2247484095&amp;amp;idx=1&amp;amp;sn=e98fb2e95cd7d2775a5611ab076fdeb5&amp;amp;chksm=ec43b3f8db343aee763e85b21b4fcf26b36049f0ea48066d65f86ee9895073d0c8e010f4a7ee&amp;amp;scene=21#wechat_redirect&#34;&gt;纯代码生成banner​&lt;/a&gt;也是分成加载中文字体、读图、图上嵌图三块。即使简单的代码，也要分模块配以文字解析。&lt;/p&gt;

&lt;p&gt;我每次只讲解一个点，但有些知识点是关联的，所以有可能会有断片的情况出现，比如之前写phylomoji，就有同学表示没看懂，这个用到了ggtree和emojifont，两个包我都写过很多文介绍，所以在写phylomoji时都没有介绍，如果没看过以前文章的人，可能就不清楚了。所以呢，适当的时候，汇总一下，是很有必要的。&lt;/p&gt;

&lt;p&gt;emojifont包我基本上都介绍完了，如果你能通读这几篇文章，那么你必然能够用emoji来作图装逼，能够用emoji来娱乐自己，就像我用emoji给自己快乐一样！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>viziometric</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/viziometric/</link>
      <pubDate>Sat, 20 May 2017 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/viziometric/</guid>
      <description>&lt;p&gt;收到了&lt;a href=&#34;http://viziometrics.org&#34;&gt;Viziometric&lt;/a&gt;的邮件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/screenshots/VizioMetric/Screenshot 2017-05-19 19.48.20.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;说要我给自己的一篇文章选一张图做为代表，我顺手点开，没想到这是一款神器啊！这是由University of Washington做Computer Vision的研究生做的一个&lt;strong&gt;学术图片&lt;/strong&gt;搜索引擎，去年被Economist和MIT Technology报道过。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>enrichDAVID支持自定义背景</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/enrichdavid-user-bg/</link>
      <pubDate>Tue, 16 May 2017 07:04:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/enrichdavid-user-bg/</guid>
      <description>&lt;p&gt;虽然我不喜欢DAVID，但很多用户喜欢，所以clusterProfiler也支持了，最近github上又有人&lt;a href=&#34;https://github.com/GuangchuangYu/clusterProfiler/issues/87&#34;&gt;要求支持自定义背景&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dear Guangchuang,&lt;/p&gt;

&lt;p&gt;I am using clusterProfiler in Kegg pathway enrichment analysis, it is useful and nice. I am looking for a function which accept background and has ability to deal with Ensembl gene ID.&lt;/p&gt;

&lt;p&gt;In a function enrichDAVID it can takes ensembl gene id as an input format, but not allows to enter background.
&lt;code&gt;enrichDAVID(gene = gene, idType=&amp;quot;ENSEMBL_GENE_ID&amp;quot;, annotation=&amp;quot;KEGG_PATHWAY&amp;quot;, species= &amp;quot;hsa&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Other command enrichKEGG has a background input but only takes entrez gene id,
&lt;code&gt;enrichKEGG(gene, organism = &amp;quot;hsa&amp;quot;, keyType = &amp;quot;kegg&amp;quot;, universe)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have tried to convert my ensembl gene IDs to entrez gene id, but some ensembl gene IDs represent more than one entrez gene ID.
I downloaded KEGG pathway dataset to apply fisher exact test. however, genes are in entrez ID and i am still dont know how to convert.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bootstrap value分段标记</title>
      <link>https://guangchuangyu.github.io/cn/2017/05/bootstrap-value%E5%88%86%E6%AE%B5%E6%A0%87%E8%AE%B0/</link>
      <pubDate>Wed, 10 May 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/05/bootstrap-value%E5%88%86%E6%AE%B5%E6%A0%87%E8%AE%B0/</guid>
      <description>&lt;p&gt;想要分段标记bootstrap，比如&lt;code&gt;0-70&lt;/code&gt;, &lt;code&gt;70-90&lt;/code&gt;, &lt;code&gt;90-100&lt;/code&gt;之类的。这个对于ggtree来说，太简单。&lt;/p&gt;

&lt;p&gt;首先我们要读树，用&lt;code&gt;treeio&lt;/code&gt;的&lt;code&gt;read.newick&lt;/code&gt;，它和&lt;code&gt;read.tree&lt;/code&gt;的不同之处是，加入了参数&lt;code&gt;node.label&lt;/code&gt;，当&lt;code&gt;node.label&lt;/code&gt;存的不是&lt;code&gt;label&lt;/code&gt;，而是&lt;code&gt;bootstrap&lt;/code&gt;等数字型的时候，你可以传入&lt;code&gt;node.label=&#39;support&#39;&lt;/code&gt;，这样它会把node label解析为support value，另存为树注释数据，而不是和tip label混在一起。label变量只能存为字符型，因为和tip label混了，而字符型会让数字操作稍微复杂点。所以我们要用&lt;code&gt;read.newick&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tree &amp;lt;- read.newick(&amp;quot;RMI.phy_phyml_tree_rooted_labeled.txt&amp;quot;, node.label=&#39;support&#39;)
root &amp;lt;- getRoot(tree@phylo)

p &amp;lt;- ggtree(tree, color=&amp;quot;black&amp;quot;, size=1.5, linetype=1,  ladderize=TRUE) + 
     ggtitle(label=&amp;quot;Figure A&amp;quot;) + 
    geom_tiplab(size=4.5, hjust = -0.060, fontface=&amp;quot;bold&amp;quot;) +  xlim(0, 0.09)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>annotate tree with user specific data</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/annotate-tree-with-user-specific-data/</link>
      <pubDate>Sat, 29 Apr 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/annotate-tree-with-user-specific-data/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/ggtree/Screen Shot 2017-04-29 at 1.46.28 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最新的一个问题，大致讲他有两个trait, A和B，想拿A来给label上色，B来画热图。&lt;/p&gt;

&lt;p&gt;加载用户数据我们有&lt;code&gt;%&amp;lt;+%&lt;/code&gt;操作符，热图有&lt;code&gt;gheatmap&lt;/code&gt;函数。&lt;/p&gt;

&lt;p&gt;我给了他一个简单的例子：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>公号狗的福音</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/%E5%85%AC%E5%8F%B7%E7%8B%97%E7%9A%84%E7%A6%8F%E9%9F%B3/</link>
      <pubDate>Sun, 23 Apr 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/%E5%85%AC%E5%8F%B7%E7%8B%97%E7%9A%84%E7%A6%8F%E9%9F%B3/</guid>
      <description>&lt;p&gt;苹果和企鹅分赃没谈好，反正林子大了，就不顾小鸟的死活！取消了iOS的赞赏功能，一个个觉得错过了一个亿，我真不知道原来你们的赞赏有这么多！我半年来得到的还不够我的日薪多。虽然少得可怜，但我还是及时地在当天给出方案来吸引眼球，创作了一个绿色的赞赏按纽。&lt;/p&gt;

&lt;p&gt;我的文章排版都是&lt;a href=&#34;https://guangchuangyu.github.io/cn/2017/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E6%96%87markdown%E4%B8%80%E9%94%AE%E6%8E%92%E7%89%88/&#34;&gt;markdown&lt;/a&gt;，markdown是外部驱动的，要什么效果，CSS话事。这个赞赏按纽无非是个链接，赞赏二字链接到转帐二维码，而要实现按纽的效果，可以专门定义一个style来实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>来自R的桌面提醒</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/%E6%9D%A5%E8%87%AAr%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%8F%90%E9%86%92/</link>
      <pubDate>Tue, 11 Apr 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/%E6%9D%A5%E8%87%AAr%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%8F%90%E9%86%92/</guid>
      <description>&lt;p&gt;&lt;strong&gt;notifier&lt;/strong&gt;包实现了跨平台的桌面提醒功能，当然它是调用了外部的命令，比如windows使用了&lt;strong&gt;toaster&lt;/strong&gt;，老版本windows使用的是&lt;strong&gt;notifu&lt;/strong&gt;，在linux下使用&lt;strong&gt;notify-send&lt;/strong&gt;，而在OSX下，则调用了&lt;strong&gt;terminal-notifier&lt;/strong&gt;，通过了简单的封装之后，就可以给桌面发布消息提醒了。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(notifier)
notify(
  title = &amp;quot;15 Packages out of date&amp;quot;,
  msg = c(&amp;quot;You can run update.packages() to update them.&amp;quot;,
  &amp;quot;Outdated packages: Boom colorspace desc memuse networkD3&amp;quot;,
  &amp;quot;pbapply revealjs rgl rmdformats timevis and 5 more&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​
效果如下：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggimage：ggplot2中愉快地使用图片</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/ggimage/</link>
      <pubDate>Tue, 11 Apr 2017 10:06:59 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/ggimage/</guid>
      <description>&lt;h1 id=&#34;导言&#34;&gt;导言&lt;/h1&gt;

&lt;p&gt;本文介绍了&lt;strong&gt;ggimage&lt;/strong&gt;包，允许在&lt;strong&gt;ggplot2&lt;/strong&gt;作图时嵌入图片，并支持&lt;code&gt;aes&lt;/code&gt;映射，可以把离散型变量映射到不同图片。目前有几个包可以使用图片嵌入做图，但都是针对特定的场景，这里使用&lt;strong&gt;ggimage&lt;/strong&gt;来展示在这些特定领域里的应用，&lt;strong&gt;ggimage&lt;/strong&gt;的设计是通用的，并不被特定场景所限定，文末又介绍了用R图标来画出R、用饼图来画气泡图等实例。&lt;/p&gt;

&lt;h1 id=&#34;图上嵌图片&#34;&gt;图上嵌图片&lt;/h1&gt;

&lt;p&gt;R 基础图形库（base graphics）可以在做图的时候嵌入图片，使用的是&lt;code&gt;graphics::rasterImage&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;imgurl &amp;lt;- &amp;quot;http://phylopic.org/assets/images/submissions/295cd9f7-eef2-441e-ba7e-40c772ca7611.256.png&amp;quot;
library(EBImage)
x &amp;lt;- readImage(imgurl)
plot(1, type = &amp;quot;n&amp;quot;, xlab = &amp;quot;&amp;quot;, ylab = &amp;quot;&amp;quot;, xlim = c(0, 8), ylim = c(0, 8))
rasterImage(x, 2, 2, 6, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lchiffon/ggimage-md-for-COS/master/figures/raster.png&#34; alt=&#34;R绘图嵌入图片演示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>generate biobabble banner using ggimage</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/generate-biobabble-banner-using-ggimage/</link>
      <pubDate>Wed, 05 Apr 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/generate-biobabble-banner-using-ggimage/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/biobabble_banner.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;制作了一个banner，用来插入到文后，方便阅读到最后的时候，直接扫描关注。&lt;/p&gt;

&lt;p&gt;这图当然用PS一下就可以得到，无非是拼图和加点文字。但做为天天写代码画图的人来说，必然是要纯代码来产生的，而且做科学的人，讲究自动化、可重复性。&lt;/p&gt;

&lt;p&gt;就像有些人不理解data scentist为什么讨厌excel一样，觉得无非是工具，没什么好搞阵营的。试想一下，一个分析流程中间有一步要用到excel，需要人工去点点鼠标，这对于讲究自动化、可重复性的data scientist来说是不可接受的。&lt;/p&gt;

&lt;h2 id=&#34;加载中文字体&#34;&gt;加载中文字体&lt;/h2&gt;

&lt;p&gt;为了打几个中文字，需要先加载字体，这里我用showtext。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(showtext)
font.add(&amp;quot;heiti&amp;quot;, &amp;quot;/Library/Fonts/华文黑体.ttf&amp;quot;)
showtext.auto()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2字体溢出的那点破事</title>
      <link>https://guangchuangyu.github.io/cn/2017/04/ggplot2%E5%AD%97%E4%BD%93%E6%BA%A2%E5%87%BA%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B/</link>
      <pubDate>Mon, 03 Apr 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/04/ggplot2%E5%AD%97%E4%BD%93%E6%BA%A2%E5%87%BA%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B/</guid>
      <description>&lt;p&gt;比如下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(ggplot2)
d &amp;lt;- data.frame(x=c(0, 0.002, 0.00575), y = 1:3)
p &amp;lt;- ggplot(d, aes(x, y)) + geom_point() + xlab(NULL) + ylab(NULL)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/ggtree/geom_text_files/figure-markdown_strict/unnamed-chunk-1-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上面图中x轴的文本&lt;strong&gt;0.006&lt;/strong&gt;，这个数字中的&lt;strong&gt;6&lt;/strong&gt;几乎看不到，因为一半过界了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于ChIPseq注释的几个问题</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/%E5%85%B3%E4%BA%8Echipseq%E6%B3%A8%E9%87%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 31 Mar 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/%E5%85%B3%E4%BA%8Echipseq%E6%B3%A8%E9%87%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;为什么我要用某个基因组版本&#34;&gt;为什么我要用某个基因组版本？&lt;/h2&gt;

&lt;p&gt;在上一篇文章中，我用了&lt;code&gt;TxDb.Hsapiens.UCSC.hg19.knownGene&lt;/code&gt;。 &lt;strong&gt;hg19&lt;/strong&gt;的&lt;strong&gt;TxDb&lt;/strong&gt;, 或者有人就要问了，为什么不用&lt;strong&gt;hg38&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;这个问题，不是说要用那一个，不能用那一个。而是你必须得用某一个，这取决于你最初&lt;strong&gt;fastq&lt;/strong&gt;用BWA/Bowtie2比对于某个版本的基因组，你最初用了某个版本，后面就得用相应的版本，不能混，因为不同版本的位置信息有所不同。&lt;/p&gt;

&lt;p&gt;当然如果要（贵圈喜欢的）强搞，也不是不可以，你得有chain file，先跑个liftOver，实际上就是在两个基因组版本之间做了位置转换。&lt;/p&gt;

&lt;h2 id=&#34;为什么说-chipseeker-支持所有物种&#34;&gt;为什么说&lt;strong&gt;ChIPseeker&lt;/strong&gt;支持所有物种？&lt;/h2&gt;

&lt;p&gt;背景注释信息用了&lt;strong&gt;TxDb&lt;/strong&gt;就能保证所有物种都支持了？我去哪里找我要的&lt;strong&gt;TxDb&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;我写&lt;strong&gt;ChIPseeker&lt;/strong&gt;的时候，我做的物种是人，&lt;strong&gt;ChIPseeker&lt;/strong&gt;在线一周就有剑桥大学的人写信跟我说在用&lt;strong&gt;ChIPseeker&lt;/strong&gt;做果蝇，在&lt;a href=&#34;https://guangchuangyu.github.io/cn/2017/03/bed%E6%96%87%E4%BB%B6/&#34;&gt;BED文件&lt;/a&gt;一文中，也提到了最近有人在Biostars上问用&lt;strong&gt;ChIPseeker&lt;/strong&gt;做裂殖酵母。&lt;/p&gt;

&lt;p&gt;首先Bioconductor提供了30个TxDb包，可以供我们使用，这当然只能覆盖到一小部分物种，我们的物种基因组信息，多半要从UCSC或者Ensembl获得，我敢说支持所有物种，就是因为UCSC和ensembl上所有的基因组都可以被&lt;strong&gt;ChIPseeker&lt;/strong&gt;支持。&lt;/p&gt;

&lt;p&gt;因为我们可以使用&lt;strong&gt;GenomicFeatures&lt;/strong&gt;包函数来制作TxDb对象：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;makeTxDbFromUCSC： 通过UCSC在线制作TxDb&lt;/li&gt;
&lt;li&gt;makeTxDbFromBiomart: 通过ensembl在线制作TxDb&lt;/li&gt;
&lt;li&gt;makeTxDbFromGRanges：通过GRanges对象制作TxDb&lt;/li&gt;
&lt;li&gt;makeTxDbFromGFF：通过解析GFF文件制作TxDb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>News in emojifont</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/news-in-emojifont/</link>
      <pubDate>Thu, 23 Mar 2017 14:30:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/news-in-emojifont/</guid>
      <description>&lt;p&gt;面向对象有多种实现方式，R里面就有3种，class-based, method-based, object-based，R6与C++/JAVA一样是class-based的，S3/S4是method-based的，还有一种是object-based的，这在proto包中实现，很多人可能没听说过，但是ggplot2你们一定听过，ggplot2就是object-based的实现，它现在是自己的定制实现，称之为ggproto。&lt;/p&gt;

&lt;p&gt;emojifont就是用proto实现的，属于我的练手之作，很高兴深受大家的喜欢。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>how to bug author</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/how-to-bug-author/</link>
      <pubDate>Mon, 20 Mar 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/how-to-bug-author/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.devtang.com/2017/03/05/how-to-get-help/&#34;&gt;http://blog.devtang.com/2017/03/05/how-to-get-help/&lt;/a&gt; 这篇文章讲问问题的礼仪，会问问题的人容易得到别人的帮助，并不是作者拽，而是对着一群不会问问题，且一副理所当然的用户，早就有了深深的无力感，也看看我写的这篇吧，&lt;a href=&#34;https://guangchuangyu.github.io/2016/07/how-to-bug-author/&#34;&gt;https://guangchuangyu.github.io/2016/07/how-to-bug-author/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是前几天的文字推送，不知道大家有没有阅读这两篇博客文？如何提问，这是一项重要的技能，很遗憾很多人并没有这项技能！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2017/413360782.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就在上周，我正好就在微信群里跟某位老师说不要给我个截屏，说能不能在ggtree里实现某功能。懂的人知道，我只是希望大家用正确的方式来做事情，不懂的人，当然觉得我拽，JJYY什么的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>peak注释</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/peak%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Thu, 16 Mar 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/peak%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;p&gt;这一次讲解非常重要的peak注释，注释在&lt;strong&gt;ChIPseeker&lt;/strong&gt;里只需要用到一个函数&lt;strong&gt;annotatePeak&lt;/strong&gt;，它可以满足大家各方面的需求。&lt;/p&gt;

&lt;h2 id=&#34;输入&#34;&gt;输入&lt;/h2&gt;

&lt;p&gt;当然需要我们上次讲到的BED文件，&lt;strong&gt;ChIPseeker&lt;/strong&gt;自带了5个BED文件，用&lt;strong&gt;getSampleFiles()&lt;/strong&gt;可以拿到文件的全路径，它返回的是个named list，我这里取第4个文件来演示。&lt;strong&gt;annotatePeak&lt;/strong&gt;的输入也可以是&lt;strong&gt;GRanges&lt;/strong&gt;对象，你如果用R做peak calling的话,直接就可以衔接上&lt;strong&gt;ChIPseeker&lt;/strong&gt;了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; require(ChIPseeker)
&amp;gt; f = getSampleFiles()[[4]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;巧妇难为无米之炊，就像拿到&lt;strong&gt;fastq&lt;/strong&gt;要跑&lt;strong&gt;BWA&lt;/strong&gt;，你需要全基因组的序列一样，做注释当然需要注释信息，基因的起始终止，基因有那些内含子，外显子，以及它们的起始终止，非编码区的位置，功能元件的位置等各种信息。&lt;/p&gt;

&lt;p&gt;很多软件会针对特定的物种去整理这些信息供软件使用，但这样就限制了软件的物种支持，有些开发者写软件本意也是解决自己的问题，可能对自己的研究无关的物种也没兴趣去支持。&lt;/p&gt;

&lt;p&gt;然而&lt;strong&gt;ChIPseeker&lt;/strong&gt;支持所有的物种，你没有看错，&lt;strong&gt;ChIPseeker&lt;/strong&gt;没有物种限制，当然这是有前提的，物种本身起码是有基因的位置这些注释信息，不然就变无米之炊了。&lt;/p&gt;

&lt;p&gt;这里我们需要的是一个&lt;strong&gt;TxDb&lt;/strong&gt;对象，这个&lt;strong&gt;TxDb&lt;/strong&gt;就包含了我们需要的各种信息，&lt;strong&gt;ChIPseeker&lt;/strong&gt;会把信息抽取出来，用于注释时使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; require(TxDb.Hsapiens.UCSC.hg19.knownGene)
&amp;gt; txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
&amp;gt; x = annotatePeak(f, tssRegion=c(-1000, 1000), TxDb=txdb)
&amp;gt;&amp;gt; loading peak file...				 2017-03-09 11:29:18 PM 
&amp;gt;&amp;gt; preparing features information...		 2017-03-09 11:29:18 PM 
&amp;gt;&amp;gt; identifying nearest features...		 2017-03-09 11:29:19 PM 
&amp;gt;&amp;gt; calculating distance from peak to TSS...	 2017-03-09 11:29:20 PM 
&amp;gt;&amp;gt; assigning genomic annotation...		 2017-03-09 11:29:20 PM 
&amp;gt;&amp;gt; assigning chromosome lengths			 2017-03-09 11:29:42 PM 
&amp;gt;&amp;gt; done...					 2017-03-09 11:29:42 PM 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;这里需要注意的是，启动子区域是没有明确的定义的，所以你可能需要指定&lt;strong&gt;tssRegion&lt;/strong&gt;，把基因起始转录位点的上下游区域来做为启动子区域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有了这两个输入（BED文件和TxDb对象），你就可以跑注释了，然后就可以出结果了。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BED文件</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/bed%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 09 Mar 2017 00:13:57 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/bed%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;BED的全称是Browser Extensible Data，顾名思义是为genome browser设计的，大名鼎鼎的bedtools可不是什么「床上用品」。&lt;/p&gt;

&lt;p&gt;BED包含有3个必须的字段和9个可选字段。&lt;/p&gt;

&lt;p&gt;三个字段包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 chrom - 染色体名字&lt;/li&gt;
&lt;li&gt;2 chromStart - 染色体起始位点&lt;/li&gt;
&lt;li&gt;3 chromEnd - 染色体终止位点&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;这里必须指出的是&lt;strong&gt;chromStart&lt;/strong&gt;是起始于0，而不是1。很多分析软件都忽略
了这一点，会有一个碱基的位移，据我所知Homer和ChIPseeker没有这个问题，而像peakAnalyzer, ChIPpeakAnno等都有位移的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可选的9个字段包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4 name - 名字&lt;/li&gt;
&lt;li&gt;5 score - 分值(0-1000), 用于genome browser展示时上色。&lt;/li&gt;
&lt;li&gt;6 strand - 正负链，对于ChIPseq数据来说，&lt;strong&gt;一般&lt;/strong&gt;没有正负链信息。&lt;/li&gt;
&lt;li&gt;7 thickStart - 画矩形的起点&lt;/li&gt;
&lt;li&gt;8 thickEnd - 画矩形的终点&lt;/li&gt;
&lt;li&gt;9 itemRgb - RGB值&lt;/li&gt;
&lt;li&gt;10 blockCount - 子元件（比如外显子）的数目&lt;/li&gt;
&lt;li&gt;11 blockSizes - 子元件的大小&lt;/li&gt;
&lt;li&gt;12 blockStarts - 子元件的起始位点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux版迅雷</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/linux%E7%89%88%E8%BF%85%E9%9B%B7/</link>
      <pubDate>Mon, 06 Mar 2017 23:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/linux%E7%89%88%E8%BF%85%E9%9B%B7/</guid>
      <description>&lt;p&gt;上次讲了&lt;a href=&#34;http://guangchuangyu.github.io/2016/03/yet-an-unofficial-bioedit-for-osx/&#34;&gt;OSX版BioEdit&lt;/a&gt;，还蛮受欢迎，说到下载工具，linux的小伙伴们都想用迅雷，有没有？毕竟大家都想耍流氓。许久没打开迅雷，今日一打开，发现被学校给墙掉了。&lt;strong&gt;大写的杯具啊！&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have attempted to use an application which is in violation of your internet usage policy.&lt;/p&gt;

&lt;p&gt;Thunder.Xunlei&lt;/p&gt;

&lt;p&gt;Category: P2P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;老司机不能偷偷地下片 了，唯有分享出来，带大家上车。还好我有一张半年前的截屏，不然连张图都没有。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unknown annotation in enrichment analysis</title>
      <link>https://guangchuangyu.github.io/cn/2017/03/unknown-annotation-in-enrichment-analysis/</link>
      <pubDate>Fri, 03 Mar 2017 00:10:37 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/03/unknown-annotation-in-enrichment-analysis/</guid>
      <description>&lt;p&gt;小伙伴说注释不全，比如KEGG只有不到1万个基因有注释，但他一次RNA-seq出来的基因有2万多个，那其它没注释那1万多个岂不是扔了？！就某个通路来说，两种情况，要么属于，要么不属于这个通路。那1万多个应该放在背景里，不要扔。&lt;/p&gt;

&lt;p&gt;我的解答是三种情况，1属于，2不属于，3不知道。对于缺失信息的，当然是扔。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OSX版BioEdit</title>
      <link>https://guangchuangyu.github.io/cn/2017/02/osx-bioedit/</link>
      <pubDate>Mon, 27 Feb 2017 13:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/02/osx-bioedit/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;BioEdit是一个Windows的程序，但在这里我要说的是苹果版！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mbio.ncsu.edu/bioedit/bioedit.html&#34;&gt;&lt;img src=&#34;http://www.mbio.ncsu.edu/bioedit/Banner1.GIF&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BioEdit有很多的功能，当然基本上我是不会用的，然而其核心的功能，编辑序列比对，是没法回避的！因为根本找不到可以与之匹敌的软件！&lt;/p&gt;

&lt;p&gt;神马！序列比对不都是clustalw, muscle, mafft这些软件生成完事吗？怎么还要编辑？！我只能说，年轻人，拿衣服啊。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>根据GTF画基因的多个转录本结构</title>
      <link>https://guangchuangyu.github.io/cn/2017/02/%E6%A0%B9%E6%8D%AEgtf%E7%94%BB%E5%9F%BA%E5%9B%A0%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BD%AC%E5%BD%95%E6%9C%AC%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 21 Feb 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/02/%E6%A0%B9%E6%8D%AEgtf%E7%94%BB%E5%9F%BA%E5%9B%A0%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BD%AC%E5%BD%95%E6%9C%AC%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;这是&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&amp;amp;mid=2247484044&amp;amp;idx=2&amp;amp;sn=56b45eaeb4ad344481afa05abeb1c53e&amp;amp;chksm=9b484237ac3fcb219e41d5653fb800f987e7d217bbb3a5a0c0170ffb8e402f4cc5f726212ef7&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0220calgiLgIZmjiiaNXZ0BE&amp;amp;key=df0a0b140e64a33b97880a54ee7cc95794b60a225d5338e88620674bed463405e61c5365394b7830750de8d3a88e122babd535c88c7d74b974b20c509218cf00d106c991a3a3f049c698a8f847aa5e06&amp;amp;ascene=0&amp;amp;uin=MTMxNjc4OTY2Mg%3D%3D&amp;amp;devicetype=iMac14%2C2+OSX+OSX+10.11.6+build&#34;&gt;生物技能树的一道习题&lt;/a&gt;，使用了base plot来画，做为补充，我使用ggplot2来重画一遍。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChIPseq简介</title>
      <link>https://guangchuangyu.github.io/cn/2017/02/chipseq%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 20 Feb 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/02/chipseq%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;ChIP是指染色质免疫沉淀，它通过特异结合抗体将DNA结合蛋白免疫沉淀，可以用于捕获蛋白质（如转录因子，组蛋白修饰）的DNA靶点。这技术存在非常久了，在二代测序之前，结合microarray，它的名字叫&lt;code&gt;ChIP-on-chip&lt;/code&gt;，二代测序出来之后，显而易见的，免疫沉淀拉下来的DNA拿去NGS测序，这必然是下一代的ChIP技术，优点也是显而易见的，不再需要设计探针（往往存在着一定的偏向性）。所以NGS出来以后，不差钱的牛逼实验室显然占据上风，谁先做出来，谁就定义了新技术。这是有钱人的竞赛，没钱的只能等着技术烂大街的时候跟风做。&lt;/p&gt;

&lt;p&gt;这是显而易见的下一代技术，外加技术上完全是可行的，所以这是一场单纯的时间竞赛，于是几乎同时出来CNS文章，基本上谁也不比谁差地同时扔出来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Johnson DS, Mortazavi A et al. (2007) Genome-wide mapping of in vivo protein–DNA interactions. Science 316: 1497–1502&lt;/li&gt;
&lt;li&gt;Robertson G et al.(2007) Genome-wide profiles of STAT1 DNA association using chromatin immunoprecipitation and massively parallel sequencing. Nature Methods 4: 651–657&lt;/li&gt;
&lt;li&gt;Schmid et al. (2007) ChIP-Seq Data reveal nucleosome architecture of human promoters. Cell 131: 831–832&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;2007年来自三个不同的实验室，几乎是同时间出来（最长差不了3个月），分别发CNS，一起定义了这个&lt;code&gt;ChIPseq&lt;/code&gt;技术。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wrapping labels in ggplot2</title>
      <link>https://guangchuangyu.github.io/cn/2017/02/wrapping-labels-in-ggplot2/</link>
      <pubDate>Tue, 14 Feb 2017 09:50:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/02/wrapping-labels-in-ggplot2/</guid>
      <description>&lt;p&gt;在公众号biobabble后台有多人同时在问这个问题：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2017/2017-02-12-223832_646x667_scrot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;晒这个截屏主要想说一点，如果是一两句话就能说清楚的问题，可以提问，如果不是，则不要在后台提问，写邮件或者到论坛提问，是更好的方式，像截屏中显示的，图片显示过期，我根本就没看到过图片。在手机上是无法看的，而我正好几天没在电脑前，于是你们发的图片我看不了，而且我如果没有在24小时之内回复，公众平台就不允许我回复了，因为问题已经过期。所以在此强调，不要在后台发图片提问，不要在后台问稍复杂的问题。&lt;/p&gt;

&lt;p&gt;这个问题其实很简单，用&lt;code&gt;stringr&lt;/code&gt;包的&lt;code&gt;str_wrap&lt;/code&gt;来完成文本自动换行就行了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggtree发表</title>
      <link>https://guangchuangyu.github.io/cn/2017/01/ggtree%E5%8F%91%E8%A1%A8/</link>
      <pubDate>Sun, 22 Jan 2017 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/01/ggtree%E5%8F%91%E8%A1%A8/</guid>
      <description>&lt;p&gt;MEE在18号出版了今年（第8卷）第1期，ggtree正好在这一期出版，一经出版就有几条推在传播, 我也是在推特上看到，才发现，哦原来我的文章出版了。然后我又发现2017年新鲜出炉有了一篇PNAS的引用。&lt;/p&gt;

&lt;p&gt;我以前没接触过进化，来了现在这个实验室，发现可视化是个大问题，大家都在用AI，慢慢地抠，对于一些和进化树相关的数据，自己一点一点地在AI里面加上去。甚至于genotype table是一个框一个框地在AI里面加的。一方面画一顆树可能用掉你几天的时间，另一方面，太容易出错了，再者你花的时间并不能转化为生产力，每一次你都要这么搞！这简直就是水深火热啊！&lt;/p&gt;

&lt;p&gt;我也帮师兄写过一些代码，给定进化树上节点的序列，我比较父节点和子节点，把碱基或氨基酸替换写到newick树的node label，然后就可以用软件展示序列的替换情况。教会了师兄，他再去给他的师弟师妹们演示，说以后咱们可以这么干了，一个个觉得很牛逼，我内心想的是，愚蠢的人类啊，node label只能存一个信息，牛逼的方式应该是可以展示多个维度的信息，通过图层自由组合。这个时候我就产生了要写ggtree的想法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信公众文markdown一键排版</title>
      <link>https://guangchuangyu.github.io/cn/2017/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E6%96%87markdown%E4%B8%80%E9%94%AE%E6%8E%92%E7%89%88/</link>
      <pubDate>Wed, 18 Jan 2017 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E6%96%87markdown%E4%B8%80%E9%94%AE%E6%8E%92%E7%89%88/</guid>
      <description>&lt;p&gt;微信公众号的后台排版功能很差，要想让读者阅读起来舒服，写作的人要花很多时间，于是出现了像&lt;code&gt;秀米&lt;/code&gt;这样的第三方排版网站，即便如此，要想排出好的版面，仍然是件耗时的事情，而且像在文章里贴代码这种小众需求，是不被支持的，代码就像普通文本，那叫一个乱。&lt;/p&gt;

&lt;p&gt;好在微信平台是支持富文本的，我们复制粘贴过来，格式都还会在，像抄我ggplot2那篇文的&lt;code&gt;生信人&lt;/code&gt;，就是完全复制粘贴的，还是我博客上的排版，当然它到了公众号上就乱了，我们其实很容易发现很多复制粘贴的，都没自己排一下版面，直接&lt;code&gt;ctrl-C&lt;/code&gt;, &lt;code&gt;ctrl-V&lt;/code&gt;一点诚意都没有。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R包辣鸡之CorMut</title>
      <link>https://guangchuangyu.github.io/cn/2017/01/cormut/</link>
      <pubDate>Tue, 17 Jan 2017 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/01/cormut/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;曾经QQ上有人叫我帮忙，跑某个R包做个分析，我一看那包，一堆bug，显然不能用，那就不是简单的事了，我可没空帮他写代码，于是他就经常恶心我，有事没事就来说我写ggtree没意义，不是实质科研，不如跟他做点牛逼的，不如再写个R包干他那事。昨天用马甲在进化群里问画树，我还热心贴个代码给他，说看不懂，我在群里说了，我写个文详细介绍一下。然而他的马甲身份暴露啦，所以今日跳票，我写好的文也不发了，你牛逼就不要用马甲来骗代码呀，ggtree没用你不要用呀，叔就是这么任性😎&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前讲过某个R包我一看一堆bug，直接放弃，今天倒是拿出来晒一下，不为别的，我只想说一句，一知半解是很危险的，盲目相信软件也是很危险的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChIPseq从入门到放弃</title>
      <link>https://guangchuangyu.github.io/cn/2017/01/chipseq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</link>
      <pubDate>Sun, 08 Jan 2017 22:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2017/01/chipseq%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</guid>
      <description>&lt;p&gt;接下来要出一个ChIPseq系列，讲一讲ChIPseq和我的ChIPseeker包，从入门到放弃是我自己的个人写照。我做ChIPseq总共也就3个月的时间，做的事情并不多，在一知半解的情况下写下了ChIPseeker包。&lt;/p&gt;

&lt;p&gt;我当时被要求做ChIPseq分析是为他人做嫁衣，而且是完全白干那种，但做为学生，白干也得干。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2017/1487166664.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当时一开始使用ChIPpeakAnno做注释，但用UCSC genome browser检验结果的时候，发现对不上。在对ChIPpeakAnno包不满意的情况下，开始着手写ChIPseeker，其实在使用ChIPpeakAnno的时候，我就有写代码对结果做一些可视化，所以未有ChIPseeker先有ChIPseeker的部分可视化功能。当时写了篇博客文说ChIPpeakAnno的问题，一个月后就在Bioconductor上发表了ChIPseeker，这包完全是我半夜在宿舍里写出来的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clifun:在R里装装逼</title>
      <link>https://guangchuangyu.github.io/cn/2016/12/clifun/</link>
      <pubDate>Tue, 13 Dec 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/12/clifun/</guid>
      <description>&lt;p&gt;天天活在命令行下，需要一些有趣的小命令来调节一下枯燥的生活（其实是需要装装逼）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/R/clifun/Screen Shot 2016-12-12 at 1.42.00 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跨物种计算基因相似性</title>
      <link>https://guangchuangyu.github.io/cn/2016/12/%E8%B7%A8%E7%89%A9%E7%A7%8D%E8%AE%A1%E7%AE%97%E5%9F%BA%E5%9B%A0%E7%9B%B8%E4%BC%BC%E6%80%A7/</link>
      <pubDate>Wed, 07 Dec 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/12/%E8%B7%A8%E7%89%A9%E7%A7%8D%E8%AE%A1%E7%AE%97%E5%9F%BA%E5%9B%A0%E7%9B%B8%E4%BC%BC%E6%80%A7/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I know this question has been asked before a long time ago and I don&amp;rsquo;t see an answer of that question in the mailing list or in the vignette of GOsemsim package. So I was wondering what is the easiest possible way of calculating GO semantic similarity value for orthologus gene pairs between two species using the above R package or any other package you know of. I am not doing this for less annotated species I need to calculate that for orthologus genes between Human and Mouse (both of which are well annotated IMHO). So I would much appreciate it if anyone who has already done this before can point me to a resource which already has pre-calculated semantic similarity values for Mouse and Human orthologues or has inbuilt code to do that.&lt;/p&gt;

&lt;p&gt;Thanks &amp;amp; regards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是Bioconductor support site上的&lt;a href=&#34;https://support.bioconductor.org/p/90063/&#34;&gt;问题&lt;/a&gt;，问的是他想要计算人类和老鼠的直系同源基因通过GO注释来计算语义相似性，问GOSemSim是否支持，这个答案是yes and no。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Linked List to solve Josephus problem</title>
      <link>https://guangchuangyu.github.io/cn/2016/12/using-linked-list-to-solve-josephus-problem/</link>
      <pubDate>Sun, 04 Dec 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/12/using-linked-list-to-solve-josephus-problem/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这个问题是以弗拉维奥·约瑟夫斯命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，他们将向罗马军队投降，不再自杀。约瑟夫斯把他的存活归因于运气或天意，他不知道是哪一个。  &amp;ndash; &lt;a href=&#34;https://zh.wikipedia.org/wiki/约瑟夫斯问题&#34;&gt;https://zh.wikipedia.org/wiki/约瑟夫斯问题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个比较简单的问题，n个人围成圆圈，越过k-1个人，杀掉第k个人，如此反复直到只剩下最后一个人。可以用数学推导给出答案，问题本身已经足够简单，用链表可以模拟整个过程。实现起来比较直观。这里在初始化这个链表的时候，需要注意，到了最后一人的时候，他应该指向第一个人，这样才能形成一个环状的链表，然后问题就非常简单了，从第一人开始，后面就无所谓头和尾了，按照规则来，每次杀掉一个人，直到只剩下最后一人，就是结果。从维基的解释可以看出，最后两个人没死，这没节操的事情被拿来说，如果你数学好，你就可以救自己一命（站在合适的位置，让自己是最后一个）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中空的环形树</title>
      <link>https://guangchuangyu.github.io/cn/2016/12/%E4%B8%AD%E7%A9%BA%E7%9A%84%E7%8E%AF%E5%BD%A2%E6%A0%91/</link>
      <pubDate>Sat, 03 Dec 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/12/%E4%B8%AD%E7%A9%BA%E7%9A%84%E7%8E%AF%E5%BD%A2%E6%A0%91/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/Bioconductor/ggtree/iss95.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree/issues/95&#34;&gt;github&lt;/a&gt;上的问题，他想画环形树的时候，加一条长长的root length把tips给顶出去。&lt;/p&gt;

&lt;p&gt;这个问题在google forum上我早已解答：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>无中生有windows版R包</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/%E6%97%A0%E4%B8%AD%E7%94%9F%E6%9C%89windows%E7%89%88r%E5%8C%85/</link>
      <pubDate>Wed, 30 Nov 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/%E6%97%A0%E4%B8%AD%E7%94%9F%E6%9C%89windows%E7%89%88r%E5%8C%85/</guid>
      <description>&lt;p&gt;之前帮助高老师实现比对序列的做图，把代码打包为R包seqcombo，方便安装使用。花两小时的作品，发现还有些用户在使用 -，-&lt;/p&gt;

&lt;p&gt;之前有人联系我说安装不上，我觉得不应该有这个问题，因为是纯R代码代码，不涉及到编译，源码包安装不应该有问题。但既然有人问，又都是windows用户，我想可以给他们提供编译好的windows包，简化安装过程（这么体贴用户，我都要被自己感动了）。&lt;/p&gt;

&lt;p&gt;放在CRAN或Bioconductor上的R包，CRAN和Bioconductor会编译出不同平台的二进制包，但seqcobo放在github上，只有源代码，没有预编译好的包，但没有不是问题，我编译好放上去就行了。&lt;/p&gt;

&lt;p&gt;但问题是我没有windows！多年来一直是OSX和linux，MacBook Pro跑Arch Linux，一台iMac跑OSX，我自己根本没有跑windows的机器，所以难为无米之炊，借台机器总是有的，但总不能每次一更新，就拷个代码去别人的机器上打包，再拷回来上传到网上，想想也是蛋疼。&lt;/p&gt;

&lt;p&gt;所以没有windows，这事干起来还不太容易，！在想怎么来无中生有生出个windows包出来的时候，我想起了rhub，也是因为没有windows，之前就用rhub来进行windows平台的R check，在把代码push到CRAN或Bioconductor之前，我总会测试没问题了，再提交代码过去，而rhub正好可以给我提供windows平台的检测。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vertical dendrogram in ggtree</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/vertical-dendrogram-in-ggtree/</link>
      <pubDate>Tue, 29 Nov 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/vertical-dendrogram-in-ggtree/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/guangchuangyu?ref_src=twsrc%5Etfw&#34;&gt;@guangchuangyu&lt;/a&gt; Is it possible to plot horizontal trees with ggtree? (a la plot.hclust default).&lt;/p&gt;&amp;mdash; Diego Diez (@kurai_yousei) &lt;a href=&#34;https://twitter.com/kurai_yousei/status/799532564633518080?ref_src=twsrc%5Etfw&#34;&gt;November 18, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;这个Diego在推特上问的问题，他最近在写一个&lt;a href=&#34;https://github.com/ddiez/motiftools&#34;&gt;motiftools&lt;/a&gt;的R包，里面用了ggtree来画图，我想他应该是要解决他在包里的画树/聚类功能吧。&lt;/p&gt;

&lt;p&gt;他问题写的horizontal，但其实plot.hclust默认是vertical，ggtree默认也是horizontal，所以我认为他问的是vertical layout，这个在我的回答中也得到了他的确认。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>buildGOmap</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/buildgomap/</link>
      <pubDate>Mon, 28 Nov 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/buildgomap/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/Bioconductor/clusterProfiler/640.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;周末Bioconductor上的问题，说的是他用了buildGOmap之后，在终端上输出了一长串，但没有文件产生，今天就来讲讲这个buildGOmap的前世今生。&lt;/p&gt;

&lt;p&gt;当年写clusterProfiler的时候在暨大工作，主要也是自己的需求驱动，因为实验室里有做细菌，比如肺炎链球菌D39，在细菌界基本上所谓的GO分析，就是跑个电子注释，然后数一下数目，列个表格画个饼图。很难看到有富集性分析的身影，因为绝大多数的工具是只支持少量模式生物的，还有部分工具比如支持某些细菌，支持某些植物或者某些真菌，比如支持植物的，也只是支持少量的植物物种而已，都是些自己定制给自己用的玩意，放出来只是为了顺道灌水而已。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用emoji画图</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/use-emoji/</link>
      <pubDate>Fri, 25 Nov 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/use-emoji/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; code for the PhD/cute animals gestation &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/gganimate?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#gganimate&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/emojifont?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#emojifont&lt;/a&gt; plot &lt;a href=&#34;https://t.co/qWM0bCHoHJ&#34;&gt;https://t.co/qWM0bCHoHJ&lt;/a&gt; 🐭🐶🐱🐺🐯🐷🐏🐻👶🐳🐘📕 &lt;a href=&#34;https://t.co/a4GYl191a8&#34;&gt;https://t.co/a4GYl191a8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Maëlle Salmon (@ma_salmon) &lt;a href=&#34;https://twitter.com/ma_salmon/status/800007428096094209?ref_src=twsrc%5Etfw&#34;&gt;November 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;无缘无故收到好几条消息，原来是用emoji画图。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>食色性也</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/%E9%A3%9F%E8%89%B2%E6%80%A7%E4%B9%9F/</link>
      <pubDate>Mon, 21 Nov 2016 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/%E9%A3%9F%E8%89%B2%E6%80%A7%E4%B9%9F/</guid>
      <description>&lt;p&gt;画图配色并不是一件简单的事情，好的配色让人眼前一亮，虽然R有很多配色方案，做为ggplot2的爱好者，ggthemes也提供了很多主题，内置了很多配色方案，还有一些其它的包，比如ggtech，包含了一些科技公司比如facebook, twitter, google的典型配色方案，甚至于ggsci，提供了nature, lancet的配色方案。&lt;/p&gt;

&lt;p&gt;但这些远远不够！
但这些远远不够！
但这些远远不够！&lt;/p&gt;

&lt;p&gt;看到一张图片让我眼前一亮，我想用它的配色方案呢！我想拿最新电影的海报的配色来装个逼呢！画图时不想用现成的配色，想要另类一些，我想用一些大自然的风格，比如求偶期间各种鸟类的羽毛颜色来画！&lt;/p&gt;

&lt;p&gt;这些在R里面，都是可以的，可以的，可以的&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DNA序列差异作图</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/dna%E5%BA%8F%E5%88%97%E5%B7%AE%E5%BC%82%E4%BD%9C%E5%9B%BE/</link>
      <pubDate>Sat, 19 Nov 2016 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/dna%E5%BA%8F%E5%88%97%E5%B7%AE%E5%BC%82%E4%BD%9C%E5%9B%BE/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2016/Screen Shot 2016-11-17 at 8.20.21 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是高老师&lt;a href=&#34;http://link.springer.com/article/10.1007/s11540-015-9307-3&#34;&gt;文章&lt;/a&gt;里的图，每一个小图都是通过比较两条比对序列差异而做出来的，从图A和B中可以看出，CF_YL21有可能是Mont和Oz两条序列重组而来。高老师自己做出这图后，深知手工统计序列差异、画图、拼图之困难。问我有没有办法读两条序列，生成一个图。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>blast一大坑：无法输出query sequence title</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/blast%E4%B8%80%E5%A4%A7%E5%9D%91%E6%97%A0%E6%B3%95%E8%BE%93%E5%87%BAquery-sequence-title/</link>
      <pubDate>Thu, 17 Nov 2016 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/blast%E4%B8%80%E5%A4%A7%E5%9D%91%E6%97%A0%E6%B3%95%E8%BE%93%E5%87%BAquery-sequence-title/</guid>
      <description>&lt;p&gt;通常做blast，我都是输出asn格式，然后用blast_formatter抽出需要的信息写成表格格式。&lt;/p&gt;

&lt;p&gt;序列的description行当然不会有重复，但是ID (第一个空白前面的字符）是有重复的，从qseqid来看，就分不清是那个序列，于是准备让blast_formatter把query title（整个description line）给输出来，结果仔细阅读了blastn -help发现不支持呀不支持！然而它支持stitle和salltitle，也就是subject的可以，但query的不行，这绝逼是一个大坑！＿|￣|○&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggtree: reverse time scale</title>
      <link>https://guangchuangyu.github.io/cn/2016/11/ggtree-reverse-time-scale/</link>
      <pubDate>Tue, 08 Nov 2016 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/11/ggtree-reverse-time-scale/</guid>
      <description>&lt;p&gt;这是最近github上的问题，如何反转time scale，也就是把最近的时间设为0。而内部节点为距今多少年，这个很容易，把x轴的值变成x-max(x)就可以，感觉这个也只会在时间树上使用，所以取名revts（reverse time scale），revts之后，x轴最大值是0，其它为负数，可以使用scale_x_continuous改label为绝对值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Update R packages</title>
      <link>https://guangchuangyu.github.io/cn/2016/10/update-r-packages/</link>
      <pubDate>Wed, 19 Oct 2016 09:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/10/update-r-packages/</guid>
      <description>&lt;p&gt;更新R较为无痛的方法已经在&lt;a href=&#34;http://guangchuangyu.github.io/2014/11/hello-yosemite/&#34;&gt;hello yosemite&lt;/a&gt;一文中提及。今天Bioconductor发布3.4版本，又是更新R包的时候了。&lt;/p&gt;

&lt;p&gt;之前为了&lt;a href=&#34;https://guangchuangyu.github.io/2016/07/how-to-bug-author/&#34;&gt;吐槽&lt;/a&gt;很多人问问题都是在使用早已不维护的老版本，写了&lt;a href=&#34;https://cran.r-project.org/web/packages/rvcheck/&#34;&gt;rvcheck&lt;/a&gt;来帮忙检查版本。既然能够帮我们检查版本，自然能够帮忙升级。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;rvcheck::update_all()&lt;/code&gt;可以自动更新CRAN, Bioconductor和Github上的R包。其实可以放到系统任务里，每月自动更新一次，然后就可以完全不用管升级的事情。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evolution of my BioC packages</title>
      <link>https://guangchuangyu.github.io/cn/2016/07/evolution-of-my-bioc-packages/</link>
      <pubDate>Wed, 13 Jul 2016 21:06:59 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/07/evolution-of-my-bioc-packages/</guid>
      <description>&lt;p&gt;发现Youtube上有一个视频叫&lt;a href=&#34;https://www.youtube.com/watch?v=MYTblx-5Yog&#34;&gt;Evolution of clusterProfiler&lt;/a&gt;, 是Landon Wilkins用&lt;a href=&#34;http://gource.io/&#34;&gt;Gource&lt;/a&gt;做的。于是我也来玩一下，看一下自己这几年码代码的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第九届ChinaR会议生物信息学分会</title>
      <link>https://guangchuangyu.github.io/cn/2016/05/%E7%AC%AC%E4%B9%9D%E5%B1%8Achinar%E4%BC%9A%E8%AE%AE%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%86%E4%BC%9A/</link>
      <pubDate>Tue, 31 May 2016 18:06:59 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/05/%E7%AC%AC%E4%B9%9D%E5%B1%8Achinar%E4%BC%9A%E8%AE%AE%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%88%86%E4%BC%9A/</guid>
      <description>&lt;p&gt;不记得是什么时候知道统计之都的，但我记得最早知道的是太云，因为我用了他写的&lt;a href=&#34;https://cran.r-project.org/package=corrplot&#34;&gt;corrplot&lt;/a&gt;包。后来统计之都最早接触的也是太云，他给我写邮件问我能不能帮忙校对&lt;a href=&#34;https://book.douban.com/subject/24527091/&#34;&gt;《ggplot2：数据分析与图形艺术》&lt;/a&gt;，从此开始和太云变成了网友。&lt;/p&gt;

&lt;p&gt;我在暨大的时候，太云曾经邀请我去China-R会议做报告，但我觉得自己没什么好分享的，&lt;a href=&#34;http://guangchuangyu.github.io/GOSemSim&#34;&gt;GOSemSim&lt;/a&gt;这个包是硕士的时候做的，不好去讲之前做的东西。而当时我写的另一个包&lt;a href=&#34;http://guangchuangyu.github.io/clusterProfiler&#34;&gt;clusterProfiler&lt;/a&gt;，纯粹是因为大量做富集分析的工具都是针对模式生物，而我们实验室有做各种细菌；另外有一些工具，背景设置是有问题的。自己实现一个包，不受别人的限制。即便是这个包现在受到了一定的认可，比如BioC 3.3中有个&lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/debrowser.html&#34;&gt;debrowser&lt;/a&gt;的包使用了clusterProfiler，而在BioC 3.4中又有个新包&lt;a href=&#34;http://bioconductor.org/packages/devel/bioc/html/bioCancer.html&#34;&gt;bioCancer&lt;/a&gt;也使用了clusterProfiler；再比如这次在北京，有好几个参会的人员在茶歇时问了clusterProfiler的问题。但始终觉得这只是个实用性的包而已，算法是别人的，而且已经比较老了，类似的工具简直就是成百上千。所以也是不好意思拿出来讲的。所以我拒绝了太云的邀请，一直也没有参加China-R的会议。&lt;/p&gt;

&lt;p&gt;今年是第九届China-R会议，这次会议规模很大，有22个分会场，超过100个演讲嘉宾，参会人数超过4000人。这一次刚好有个Bioconductor的分会场，Matt写信给我，说我写过几个Bioconductor包，他本人喜欢我的&lt;a href=&#34;http://guangchuangyu.github.io/ChIPseeker&#34;&gt;ChIPseeker&lt;/a&gt;包，问我能否在会上分享与Bioconductor包相关的经验。这是Bioconductor在中国的首秀，我欣然接受，当然也是因为这两年我写了&lt;a href=&#34;http://guangchuangyu.github.io/ChIPseeker&#34;&gt;ChIPseeker&lt;/a&gt;和&lt;a href=&#34;http://guangchuangyu.github.io/ggtree&#34;&gt;ggtree&lt;/a&gt;，我自己觉得还拿得出手🙈。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Drive @ HKU</title>
      <link>https://guangchuangyu.github.io/cn/2016/03/google-drive--hku/</link>
      <pubDate>Thu, 24 Mar 2016 15:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/03/google-drive--hku/</guid>
      <description>&lt;p&gt;寻找一个好的网盘一直是个困扰我的问题，Dropbox非常好，但空间有限，大陆的各种网盘都是渣渣，本来试用了一下&lt;a href=&#34;http://guangchuangyu.github.io/2014/05/%E6%9B%B4%E6%94%B9%E7%99%BE%E5%BA%A6%E4%BA%91%E5%90%8C%E6%AD%A5%E7%9B%98%E8%B7%AF%E5%BE%84/&#34;&gt;百度云&lt;/a&gt;，但度娘实在不争气，体验非常差。我后来找到了个比较好的方案，那就是&lt;a href=&#34;https://gitlab.com/&#34;&gt;gitlab&lt;/a&gt;，可以创建无限量的project，每个project有10G的空间，这比&lt;a href=&#34;https://github.com/&#34;&gt;github&lt;/a&gt;出手大方多了。唯一不足是&lt;code&gt;.git&lt;/code&gt;文件夹也是非常占空间的。&lt;/p&gt;

&lt;p&gt;到HKU两年多，才发现HKU的邮箱自带无限量的google drive网盘。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2016/google_drive.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ggtree实现进化树的可视化和注释</title>
      <link>https://guangchuangyu.github.io/cn/2016/03/%E4%BD%BF%E7%94%A8ggtree%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%8C%96%E6%A0%91%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%92%8C%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 09 Mar 2016 13:17:48 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2016/03/%E4%BD%BF%E7%94%A8ggtree%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%8C%96%E6%A0%91%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%92%8C%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文受魏太云（&lt;a href=&#34;http://www.weibo.com/taiyun&#34;&gt;@cloud_wei&lt;/a&gt;)的邀请，最初在2015年发表于&lt;a href=&#34;http://cos.name/2015/11/to-achieve-the-visualization-and-annotation-of-evolutionary-tree-using-ggtree/&#34;&gt;统计之都&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进化树看起来和层次聚类很像。有必要解释一下两者的一些区别。&lt;/p&gt;

&lt;p&gt;层次聚类的侧重点在于分类，把距离近的聚在一起。而进化树的构建可以说也是一个聚类过程，但侧重点在于推测进化关系和进化距离(evolutionary distance)。&lt;/p&gt;

&lt;p&gt;层次聚类的输入是距离，比如euclidean或manhattan距离。把距离近的聚在一起。而进化树推断是从生物序列（DNA或氨基酸）的比对开始。最简单的方法是计算一下序列中不匹配的数目，称之为hamming distance（通常用序列长度做归一化），使用距离当然也可以应用层次聚类的方法。进化树的构建最简单的方法是非加权配对平均法（Unweighted Pair Group Method with Arithmetic Mean, UPGMA），这其实是使用average linkage的层次聚类。这种方法在进化树推断上现在基本没人用。更为常用的是邻接法（neighbor joining），两个节点距离其它节点都比较远，而这两个节点又比较近，它们就是neighbor，可以看出neighbor不一定是距离最近的两个节点。真正做进化的人，这个方法也基本不用。现在主流的方法是最大似然法(Maximum likelihood, ML)，通过进化模型（evolutionary model)估计拓朴结构和分支长度，估计的结果具有最高的概率能够产生观测数据（多序列比对）。另外还有最大简约法和贝叶斯推断等方法用于构建进化树。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>喜新厌旧之hello Hugo</title>
      <link>https://guangchuangyu.github.io/cn/2015/12/%E5%96%9C%E6%96%B0%E5%8E%8C%E6%97%A7%E4%B9%8Bhello-hugo/</link>
      <pubDate>Fri, 04 Dec 2015 00:42:26 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2015/12/%E5%96%9C%E6%96%B0%E5%8E%8C%E6%97%A7%E4%B9%8Bhello-hugo/</guid>
      <description>&lt;p&gt;最早在China Unix上写博客，后来转战新浪。在&lt;a href=&#34;http://azaleasays.com/&#34;&gt;azelea&lt;/a&gt;的说服下，&lt;a href=&#34;http://guangchuangyu.github.io/2008/09/%E5%8D%9A%E5%AE%A2%E8%BD%ACwordpress/&#34;&gt;果断换成wordpress&lt;/a&gt;，写技术博客贴点代码什么的，新浪必须是太渣。&lt;a href=&#34;http://azaleasays.com/&#34;&gt;azelea&lt;/a&gt;是我开始独立博客的领路人，为我提供了空间和域名。再后来自己买了空间和&lt;code&gt;ygc.name&lt;/code&gt;的域名，用了好几年。本来一直有想法要换成github+jekll，恰巧&lt;a href=&#34;http://blog.shenwei.me/&#34;&gt;Wei Shen&lt;/a&gt;强力推荐HUGO。于是再一次换博客。&lt;/p&gt;

&lt;p&gt;首先面临着wordpress迁移的问题。&lt;/p&gt;

&lt;h1 id=&#34;导入wordpress-posts为markdown文件&#34;&gt;导入wordpress posts为markdown文件&lt;/h1&gt;

&lt;p&gt;试用了多个插件或脚本，都是各种出错。最后发现了神器&lt;a href=&#34;https://github.com/jprichardson/potter-wordpress&#34;&gt;potter-wordpress&lt;/a&gt;，通过npm安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g pottercms-wordpress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后一个语句:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;potter-wordpress -h WORDPRESS_SITE_URL -u USER_NAME -p PASSWORD --dir PATH_TO_STORE_MD_FILES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自动从线上把posts抓下来，并转化为&lt;code&gt;markdown&lt;/code&gt;。在之前各种搞不定之后，看到下面的输出有种莫名的快感。&lt;/p&gt;

&lt;p&gt;Fetching articles&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Got : [Sun Nov 29 2015] R kernel in Jupyter notebook 3
   Got : [Mon Nov 09 2015] phylomoji with ggtree
   Got : [Tue Nov 17 2015] 合体中的操作系统
   Got : [Mon Nov 02 2015] Comparison of clusterProfiler and GSEA-P
   Got : [Thu Oct 01 2015] ChIPseq data mining with ChIPseeker
   Got : [Tue Oct 06 2015] TRIE
   Got : [Thu Oct 15 2015] [BioC 3.2] NEWS of my BioC packages
   Got : [Wed Oct 21 2015] use simplify to remove redundancy of enriched GO terms

   ...

   Got : [Mon May 14 2007] Edit partition table in NetBSD/macppc
   Got : [Mon May 14 2007] 我的emacs配置文件
   Got : [Mon May 14 2007] pkgsrc tips
   Got : [Thu May 03 2007] scilab三维平面绘图
   Got : [Sat Jun 24 2006] qvwm窗口管理器的windows2000主题
   Got : [Wed Jun 14 2006] 安装os9和netbsd双系统
   Got : [Sat May 28 2005] 在emacs里使用maxima
   Got : [Mon Mar 14 2005] scau校园网认证
   Got : [Fri Jan 14 2005] Powerbook G3上安装gentoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>合体中的操作系统</title>
      <link>https://guangchuangyu.github.io/cn/2015/11/%E5%90%88%E4%BD%93%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 17 Nov 2015 16:06:59 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2015/11/%E5%90%88%E4%BD%93%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;p&gt;更新EI Capitan已经近一个月，第一感觉就是明显变慢了。这是去年买的27&amp;rsquo; iMac，必须不慢。
MS office程序可以打开，但打开文档直接闪退。升级安装总会有些问题，就像我去年在笔记本上&lt;a href=&#34;http://guangchuangyu.github.io/2014/11/hello-yosemite/&#34;&gt;升级yosemite&lt;/a&gt;一样，最后两分钟始终过不去，迫使我&lt;a href=&#34;http://guangchuangyu.github.io/2014/11/hello-yosemite/&#34;&gt;全新安装&lt;/a&gt;，当时我看后台记录就发现了是MacTex拷不过去，
后来MacTex的网站上也写了升级Yosemite有这个问题。升级有些小问题是可以预见的，但很少有像EI Capitan这么多的问题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.macworld.com/article/2987277/operating-systems/os-x-el-capitan-review-mac-upgrade-thats-as-solid-as-a-rock.html&#34;&gt;Macworld EI Capitan review&lt;/a&gt;文章中有人这样评论：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;haha nice review ! did you tried the update ?? slow connection safari
freezes on launch outlook crash printer does not work anymore great
job from Apple . My confidence in Apple has been seriously dented!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何画类似MEME的注释序列</title>
      <link>https://guangchuangyu.github.io/cn/2015/05/%E5%A6%82%E4%BD%95%E7%94%BB%E7%B1%BB%E4%BC%BCmeme%E7%9A%84%E6%B3%A8%E9%87%8A%E5%BA%8F%E5%88%97/</link>
      <pubDate>Thu, 21 May 2015 14:53:35 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2015/05/%E5%A6%82%E4%BD%95%E7%94%BB%E7%B1%BB%E4%BC%BCmeme%E7%9A%84%E6%B3%A8%E9%87%8A%E5%BA%8F%E5%88%97/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://guangchuangyu.github.io/blog_images/2015/Screenshot%202015-05-21%2010.31.46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://meme-suite.org&#34;&gt;MEME&lt;/a&gt;是motif分析的webserver，所谓的注释序列就是一条线条上画一些长方形的box。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BMC Favor Plagiarism</title>
      <link>https://guangchuangyu.github.io/cn/2015/05/bmc-favor-plagiarism/</link>
      <pubDate>Sun, 17 May 2015 21:51:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2015/05/bmc-favor-plagiarism/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ppiPre/index.html&#34;&gt;ppiPre&lt;/a&gt;抄袭了&lt;a href=&#34;https://github.com/GuangchuangYu/GOSemSim&#34;&gt;GOSemSim&lt;/a&gt;的代码，证据当然非常充分，比对一下代码就知道了，我在&lt;a href=&#34;http://guangchuangyu.github.io/2014/11/proper-use-of-gosemsim/&#34;&gt;Proper use of GOSemSim&lt;/a&gt;一文中，做出了一些比较，另外也可以参考&lt;a href=&#34;https://github.com/cran/ppiPre/commit/c267700ca09a599dab77326959a0aa6a2980ceed&#34;&gt;github&lt;/a&gt;页面，github记录了ppiPre被暴光抄袭之后所做的修改。
从我给BMC Systems Biology的编辑反馈这件事开始，在这铁板钉钉的事实面前，编辑拖了整整一年，而这一年时间过去了，ppiPre仍没有被编辑部受理。从最早反应这件事情，编辑信誓旦旦说他们很重视这种事情，到后面对我的邮件视而不见，我愿意相信编辑部处理这些事情，需要时间，他们有自己的规则，但一年的时间，不回邮件，冷处理以淡化此事，这绝对不是应该有的规则。 在编辑一直无视我的情况下，我写出了&lt;a href=&#34;http://guangchuangyu.github.io/2014/11/proper-use-of-gosemsim/&#34;&gt;Proper use of GOSemSim&lt;/a&gt;一文，列举了一些一模一样的代码，并告知CRAN，当ppiPre被CRAN移除时，我写信给编辑，这时候，编辑告诉我说他们准备要去联系作者了，这时候已经过去半年了，是的！你没有看错，半年过去了，编辑说他们还没去联系作者！我是不相信的。必然是联系了之后，有某些不为人知的原因，所以编辑态度反常，对抄袭这种打鸡血的事情，不断在打太极。&lt;/p&gt;

&lt;p&gt;再过二个月，ppiPre的作者&lt;a href=&#34;http://web.xidian.edu.cn/dengyue/&#34;&gt;邓岳&lt;/a&gt;给我写了信：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简简单单讲insertion size</title>
      <link>https://guangchuangyu.github.io/cn/2014/08/insertion-size/</link>
      <pubDate>Wed, 27 Aug 2014 11:44:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/08/insertion-size/</guid>
      <description>&lt;p&gt;在进行测序的时候，需要将DNA打断，构建library，这些fragment需要接上adaptor，好进行扩增，illumina的测序，可以有single
end和paired end两种，分别从一端和两端进行测序。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fragment                  ========================================
fragment + adaptors    ~~~========================================~~~
SE read                   ---------&amp;gt;
PE reads                R1---------&amp;gt;                    &amp;lt;---------R2
unknown gap                         ....................
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R binary is untrustworthy</title>
      <link>https://guangchuangyu.github.io/cn/2014/07/r-binary-is-untrustworthy/</link>
      <pubDate>Thu, 24 Jul 2014 04:22:35 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/07/r-binary-is-untrustworthy/</guid>
      <description>去年ubuntu下apt-get了R-3.0.2, 用了没多久就发现了system命令有问题，通常情况下调用系统命令是正常的，但是我调用bowtie的时候，就会报错：
Warning: Could not open read file &amp;quot;/tmp/8156.inpipe1&amp;quot; for reading; skipping... Error: Encountered internal Bowtie 2 exception (#1) Command: /usr/bin/bowtie2-align --wrapper basic-0 -p 12 -x /ssd/genomes/hg19 -S tmp.sam -1 /tmp/8156.inpipe1 -2 /tmp/8156.inpipe2  这很明显是因为fasta.gz文件，bowtie需要调用zcat来读的，在R里调用bowtie就找不到好基友zcat的输出管道。当时没在意，R不干，那就找shell。 去年用NMF包的时候，报出了人类不友好的错误，联系了包作者Gaujoux，在作者的帮助下，找到了是doParallel包的问题：
&amp;gt; library(doParallel) &amp;gt; Loading required package: foreach foreach: simple, scalable parallel programming from Revolution Analytics Use Revolution R for scalability, fault tolerance and more. http://www.revolutionanalytics.com Loading required package: iterators Loading required package: parallel &amp;gt; registerDoParallel(11) &amp;gt; &amp;gt; foreach(i = 1:10) %dopar% { getwd() } &amp;gt; *** caught segfault *** address 0x7fbeb6d399d0, cause &#39;memory not mapped&#39;  其实parallel包中用mclapply也是同样报错。于是又把维护deb包的Dirk拉进来，Dirk是Rcpp的作者，高人就是不一样，看了错误，立刻就指出是BLAS库的问题。</description>
    </item>
    
    <item>
      <title>use linux desktop again</title>
      <link>https://guangchuangyu.github.io/cn/2014/06/use-linux-desktop-again/</link>
      <pubDate>Sun, 01 Jun 2014 07:57:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/06/use-linux-desktop-again/</guid>
      <description>&lt;p&gt;上个月写了《&lt;a href=&#34;http://guangchuangyu.github.io/2014/05/use-ggplot2/&#34;&gt;使用ggplot画图&lt;/a&gt;》一文，图片太多，一下子把博客的12G流量给用光了，月中博客就被停了，小伙伴们太给力了，blog不能访问，真是件不爽的事情。&lt;/p&gt;

&lt;p&gt;言归正传，从2002年使用redhat 7.1开始，就没中止过使用linux，为什么要说again呢，因为在过去几年的工作时间里，使用的是&lt;a href=&#34;http://guangchuangyu.github.io/2011/06/screen-shot/&#34;&gt;OS X&lt;/a&gt;和win7做为桌面的，linux只在服务器端使用。自从用了OS X之后，就不想再用linux当桌面了，OS X绝对是节省生命的系统，本身是unix-like系统，对各种桌面软件支持又好，特别是中华大地，linux还是小众，用来当桌面实在是各种坑。&lt;/p&gt;

&lt;p&gt;不过现在又回到学生时代了，所以还得继续学生屌丝的折腾，本科时从redhat,debian到gentoo，硕士时实验室的机器用ubuntu，而笔记本用NetBSD。这么多年的使用，该有的坑都填了，但是时代在发展，新坑还是不断有的，使用&lt;a href=&#34;http://guangchuangyu.github.io/2014/05/%E6%9B%B4%E6%94%B9%E7%99%BE%E5%BA%A6%E4%BA%91%E5%90%8C%E6%AD%A5%E7%9B%98%E8%B7%AF%E5%BE%84/&#34;&gt;百度云&lt;/a&gt;来同步化文献库，就是最近的新坑，装上linux之后，发现度娘没有客户端，首先想到的当然是wine，wine出来的偶尔能行，时常崩溃，跟它死磕我也会崩溃，github上寻找开源实现，各种功能缺失和限制，那就只能虚拟机了，把home目录做为共享盘，挂到虚拟机中，但是度娘一直都是占100%
CPU，然后数据无法同步，只有两个原因，不是硬盘就是网络，感觉好像我一个分区800G太大了，但在虚拟中对硬盘读写正常，网络因为使用NAT，虚拟成内网，有可能是这个原因，于是换成bridge，把虚拟机当成现实网络中的另一台主机，但度娘依然只占CPU，不干活。那只能还是硬盘问题，最后问题解决了，通过在linux中提供samba服务，然后在虚拟机中通过网上邻居把共享目录映射成网络驱动器，这时候度娘终于肯干活了。都不知道是virtualbox的驱动有问题，还是度娘太挑，这太TM坑了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use ggplot2</title>
      <link>https://guangchuangyu.github.io/cn/2014/05/use-ggplot2/</link>
      <pubDate>Sun, 11 May 2014 06:17:56 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/05/use-ggplot2/</guid>
      <description>&lt;h3 id=&#34;why-use-ggplot2&#34;&gt;Why use ggplot2&lt;/h3&gt;

&lt;p&gt;ggplot2是我见过最human friendly的画图软件，这得益于Leland Wilkinson在他的著作《&lt;a href=&#34;http://book.douban.com/subject/10123863/&#34;&gt;The Grammar of Graphics&lt;/a&gt;》中提出了一套图形语法，把图形元素抽象成可以自由组合的成分，Hadley
Wickham把这套想法在R中实现。&lt;/p&gt;

&lt;p&gt;为什么要学习ggplot2，可以参考&lt;a href=&#34;http://book.douban.com/subject/24527091/&#34;&gt;ggplot2: 数据分析与图形艺术&lt;/a&gt;的&lt;a href=&#34;https://github.com/cosname/ggplot2-translation/blob/master/preface.md&#34;&gt;序言&lt;/a&gt;（btw: 在序言的最后，我被致谢了）。&lt;/p&gt;

&lt;p&gt;Hadley Wickham也给出&lt;a href=&#34;https://github.com/hadley/ggplot2/wiki/Why-use-ggplot2&#34;&gt;一堆理由&lt;/a&gt;让我们说服自己，我想再补充一点，Hadley Wickham是学医出身的，做为学生物出身的人有什么理由不支持呢:)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>更改百度云同步盘路径</title>
      <link>https://guangchuangyu.github.io/cn/2014/05/%E6%9B%B4%E6%94%B9%E7%99%BE%E5%BA%A6%E4%BA%91%E5%90%8C%E6%AD%A5%E7%9B%98%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 05 May 2014 10:45:25 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/05/%E6%9B%B4%E6%94%B9%E7%99%BE%E5%BA%A6%E4%BA%91%E5%90%8C%E6%AD%A5%E7%9B%98%E8%B7%AF%E5%BE%84/</guid>
      <description>&lt;p&gt;从2007年写了&lt;a href=&#34;http://cjbmb.bjmu.edu.cn/CN/abstract/abstract17570.shtml&#34;&gt;第一篇文章&lt;/a&gt;之后，我发现管理文献真不是人干的，一直以来使用Zotero来管理文献，自从有了dropbox之后，就想把文献库放在dropbox上，一来有个云备份，不怕硬盘坏，二来嘛，实验室电脑和个人电脑可以实时同步化，无奈dropbox空间太小，而我的zotero早已超过10G，因为电子书也放在里面，只能做罢。&lt;/p&gt;

&lt;p&gt;度娘出手还是很大方的，我现在的网盘已经有3T，包括之前在推广阶段用1元买的1T。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2014/05/Screenshot-2014-05-05-21.31.57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boxplot</title>
      <link>https://guangchuangyu.github.io/cn/2014/03/boxplot/</link>
      <pubDate>Tue, 04 Mar 2014 12:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/03/boxplot/</guid>
      <description>&lt;p&gt;生物坑很多人画图只会直方图，统计只会T检验，在暨大见过太多的学生连T检验都不会，分不清SEM和SD的差别，也不清楚T检验那几个简单参数的含义。我写统计笔记也是因为不想重复性地跟学生讲解T检验。&lt;/p&gt;

&lt;p&gt;Barplot和T test一样普遍而流行，barplot适合于表示计数数据和比例，显示比例也可以用pie
plot，但直方图比饼图要好，因为人类的眼睛适合于比较高度，而不是弧度。&lt;/p&gt;

&lt;p&gt;多半时候生物学数据并非简单的计数数据，对于测量数据，在展示数据分布时，很多人会使用他们熟悉的barplot，用高度来表示mean，然后再加上errorbar，这样展示数据，信息量是非常低的，使用boxplot能够提供更多的数据分布信息，能更好地展现数据，但可能很多人只会在excel里画barplot，Nature
Methods 2013年的文章中有100个barplot图，而只有20个boxplot图，从这里就可以看出来，用boxplot的人远远没有barplot多，于是NPG怒了，写了两篇专栏文章&lt;a href=&#34;http://www.nature.com/nmeth/journal/v11/n2/full/nmeth.2807.html&#34;&gt;Points of View: Bar charts and box plots&lt;/a&gt;和&lt;a href=&#34;http://www.nature.com/nmeth/journal/v11/n2/full/nmeth.2813.html&#34;&gt;Points of Significance: Visualizing samples with box plots&lt;/a&gt;并且发表了一篇&lt;a href=&#34;http://www.nature.com/nmeth/journal/v11/n2/full/nmeth.2811.html&#34;&gt;BoxPlotR: a web tool for generation of box plots&lt;/a&gt;方便大家画boxplot，如此简单的web tool能够发Nature Methods，实在是让人羡慕妒忌恨啊。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>old habits die hard</title>
      <link>https://guangchuangyu.github.io/cn/2014/01/old-habits-die-hard/</link>
      <pubDate>Wed, 22 Jan 2014 13:27:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2014/01/old-habits-die-hard/</guid>
      <description>从2011年1月我就在实验室的QQ群里发群邮件说IPI关门，时至今日，已经关门3年了，主页上一直停留在关门大吉的那一刻。
我不断在邮件里, lab meeting上强调要换成uniprot来搜库，然而时至今日，依然还是有很多的人在使用IPI，想想真可怕，实验室真是100年不更新一下数据啊。 另外一个我非常讨厌的就是GI号，它压根就不是正儿八经的ID号，但他们从来就不愿意尝试改变。
比如上面这个蛋白质序列的FASTA文件，注释行有很多信息，比如：
&amp;gt;gi|16128001|ref|NP_414548.1| putative transporter [Escherichia coli str. K-12 substr. MG1655]  显然搜库时可以使用NP_414548.1做为ID，这个问题我说过N多遍，但他们一定会用他们惯用的gi|16128001来做ID。
问题是很明显的：
 GI number (sometimes written in lower case, &amp;ldquo;gi&amp;rdquo;) is simply a series of digits that are assigned consecutively to each sequence record processed by NCBI. The GI number bears no resemblance to the Accession number of the sequence record. The GI number has been used for many years by NCBI to track sequence histories in GenBank and the other sequence databases it maintains.</description>
    </item>
    
    <item>
      <title>Install Emacs on Mac</title>
      <link>https://guangchuangyu.github.io/cn/2013/09/install-emacs-on-mac/</link>
      <pubDate>Tue, 10 Sep 2013 18:04:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2013/09/install-emacs-on-mac/</guid>
      <description>&lt;h2 id=&#34;package-manager&#34;&gt;package manager&lt;/h2&gt;

&lt;p&gt;之前一直用&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd/&#34;&gt;NetBSD&lt;/a&gt;的&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;pkgsrc&lt;/a&gt;做为各种Unix-like系统的包管理系统，pkgsrc在自己内部解决依赖关系，这点对于生产环境来说，是很好的一个优点，我通常会在服务器里装一个pkgsrc，在用户目录下，维护一套UNIX软件。但是用在自己的机器上，内部解决软件依赖，就是个缺点，浪费编译时间和硬盘空间。&lt;/p&gt;

&lt;p&gt;Mac上可用的包管理系统很多，Fink移植于&lt;a href=&#34;http://guangchuangyu.github.io/categories/linux/&#34;&gt;Debian&lt;/a&gt;的apt，&lt;a href=&#34;http://guangchuangyu.github.io/categories/linux/&#34;&gt;Gentoo&lt;/a&gt;的portage也支持OS X。OS X是基于BSD的系统，BSD有自己的一套包管理系统，如FreeBSD的ports和&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd/&#34;&gt;NetBSD&lt;/a&gt;的&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;pkgsrc&lt;/a&gt;，MacPorts可以看作是这一系列中的一个，不过它并不是OS X原生的，它只是OpenDarwin的子项目，所以和pkgsrc一个样，也是内部解决依赖，真正为OS
X设计的原生包管理系统非Homebrew莫属，它会尽量依赖系统里已有的软件。

自从用了Homebrew之后，再也不用为系统里有两套perl和python而crazy了，之前通过&lt;a href=&#34;http://guangchuangyu.github.io/2011/06/screen-shot/&#34;&gt;pkgsrc装的软件&lt;/a&gt;全删掉，改Homebrew来安装和管理。
如果软件没有被pkgsrc收录，而想通过pkgsrc来管理的话，那就得自己&lt;a href=&#34;http://guangchuangyu.github.io/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/&#34;&gt;写makefile&lt;/a&gt;，而homebrew，则可以自动帮你生成Formula，比如我要安装&lt;a href=&#34;http://users.soe.ucsc.edu/~kent/src/&#34;&gt;blat&lt;/a&gt;：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Permanent Head Damage to be</title>
      <link>https://guangchuangyu.github.io/cn/2013/07/permanent-head-damage-to-be/</link>
      <pubDate>Tue, 30 Jul 2013 16:18:26 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2013/07/permanent-head-damage-to-be/</guid>
      <description>&lt;p&gt;看似寻常最奇崛，成如容易却艰辛。在暨大工作了几年，发几篇小文章，觉得要找个地方读PhD，是件手到擒来的事，结果却花了整整一年的时间，事实证明像我这样的科研屌丝男，举步唯艰啊。
去年7月份就开始在计划这个事情，我几乎想都没想就联系了计算生物所的JD
Han，紧接着就是面试，第一次尝试用英文去讲slides，从早上10点讲到中午12点。感觉还好吧，因为有听到Han说impressive，而她的学生又说经常看我blog。看上去还是蛮顺利的，然而最终reject了我，而且没有给我任何原因。&lt;/p&gt;

&lt;p&gt;我去上海是非常低姿态的，说要面试，我就飞过去，当时想要是面试OK了，可能会让我留下来先了解一下正在进行的project，所以没有听老婆的话买返程票，结果从上海回广州，就变成了人在囧途，买不到火车票，就去南昌转车，结果遇到两趟车都是慢车，无空调，还无座。这个事情教会了我，不能太低姿态。&lt;/p&gt;

&lt;p&gt;我一直在想为什么会去上海，为什么会联系Han，或许是心理学上所谓的契可尼效应，俗称偷不如偷不着，当年考上生没中，心中依然有执念？我自认为早已释然，but
maybe..，至于Han，我在研一的时候，去北大听过她的讲座，被系统生物学这个概念忽悠了，可能因此内心抱有幻想。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ImageMagick压缩TIFF</title>
      <link>https://guangchuangyu.github.io/cn/2013/06/compress-tiff/</link>
      <pubDate>Fri, 07 Jun 2013 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2013/06/compress-tiff/</guid>
      <description>TIFF (Tagged Image File Format)拥有更宽的线性动态范围，所以在专业的图片处理上，一直是一个通用的文件格式。
最近一篇发表在Metallomics的文章，我本来做的图片都是PDF格式，矢量图最好了，文件特别小，还可以任意放大。不过杂志社要求600DPI的TIFF或EPS。
我第一反应是拒绝使用TIFF，600DPI的TIFF文件肯定非常大，EPS也是矢量图，我用R重新把图画一遍，存为EPS就OK了。画图的过程，我发现对EPS的支持不太好，老报些某字体不存在的错误。这当然不是什么大不了的事，自己指定字体就好了。问题在于有张图是拼的，我只能借助于软件转换，我用Inkscape处理，导出EPS，出来的图我发现有些细节并不太好。
无奈之下还是用TIFF吧，Fig1和3都是R画的，直接指定分辨率和压缩算法，存为TIFF文件。Fig1是3000x3000pixel 600dpi的图，只有320k，Fig3是4200x4200pixel的图，也是600dpi，只有558k，用R产生TIFF还是非常靠谱的。
关键是Fig2，这一张拼的图，存成PDF矢量图，需要用ImageMagick转换成600DPI的TIFF图片，ImageMagick需要安装Xcode才能在Mac下编译成功。
Yus-Mac-Pro:others ygc$ convert -density 600 fig2.pdf fig2.tif Yus-Mac-Pro:others ygc$ identify -verbose fig2.tif Image: fig2.tif Format: TIFF (Tagged Image File Format) Class: DirectClass Geometry: 6000x4500+0+0 Resolution: 600x600 Print size: 10x7.5 Units: Undefined Type: PaletteMatte Base type: TrueColor Endianess: MSB ... Yus-Mac-Pro:others ygc$ convert -density 600 -compress lzw fig2.pdf fig2_compress.tif Yus-Mac-Pro:others ygc$ ls -l fig2*.tif -rw-r--r-- 1 ygc admin 216036263 May 23 17:53 fig2.</description>
    </item>
    
    <item>
      <title>TALEN基因编辑</title>
      <link>https://guangchuangyu.github.io/cn/2013/01/talen%E5%9F%BA%E5%9B%A0%E7%BC%96%E8%BE%91/</link>
      <pubDate>Thu, 10 Jan 2013 08:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2013/01/talen%E5%9F%BA%E5%9B%A0%E7%BC%96%E8%BE%91/</guid>
      <description>分子生物学的基础和兴起离不开各种酶的发现和抗体的制备。没有抗体，蛋白质就玩不转，没有限制性内切酶和连接酶，就没有基因工程，如果没有耐高温酶的发现，连PCR都是件痛苦的事情，写到这里，我突然觉得做细菌也是蛮好的，因为比较有可能发现一些功能比较奇特的蛋白，而这些蛋白，一经改造，可能就是技术上的革新。
TALE(transcription activator-like effector)也不例外，最初在植物致病菌黄单胞菌（_Xanthomonas_）中被发现，在致病过程中，能够特异性地结合和调控植物基因。
TALE的结构中间（红色部分）是重复序列，介导DNA识别，每一个重复片段为33-35个氨基酸，其中12和13位置两个氨基酸决定碱基偏好性，这两个相邻的氨基酸被称之为重复可变双残基（repeat variable di-residue, RVD），RVD所编码的靶标碱基由上图b所示，基本上你看一段TALE的重复序列，就可以预测到它将结合到什么样的DNA序列上，或者你看一段DNA序列，可以很容易地设计结合它的TALE重复序列。
N端通常是288个残基，其中Δ152做为截断点，去掉前面用于进入植物细胞的功能，而保留TALE蛋白的其它功能。C端通常是278个残基。
中间重复片段的特性使得TALE很容易被改造，应用于各种定点靶向的场景。 Activator 2011年发表在NBT上的文章《A TALE nuclease architecture for efficient genome editing》将TALE改造成促进特定基因表达。将天然TALE进行PCR扩增，去掉前面152个残基，重复序列改造为结合NTF3的启动子邻近区域(proximal promoter)，C端连上VP16（转录激活结构域），结果诱导超过20倍的表达。NTF3基因编码一个分泌性的生长因子，对神经退行性疾病有一个的治疗功效。作者把C端截断，保留95个残基再接上VP16，同样也是mRNA超过20倍的表达。 Nuclease 位点特异性的核酸酶是基因组工程的有力工具，产生断裂的双链DNA（double strand breaks, DSBs），可以进行同源重组、靶向插入、删除。锌指蛋白（zinc finger protein）连接FokI的水解结构域，构成了锌指核酶(zinc finger nuclease, ZFN)被用来进行基因组编辑，但是ZFN的特异性和效率较差，可重复性不好。
TALE的单碱基识别能力，显然在特异性上是无可比拟的，有了TALE，TALEN（TALE-nuclease，TALE接上核酸酶）技术应运而生，特异性好，效率高，而且可以应用于各种物种。TALEN通常以同二聚体（homodimer）或异二聚体（hterodimer）对DNA从两端进行切割，两端切割点的距离（spacer length）可以是10-30bp之间，取决于linker的长度，即连接重复结构域和切割结构域的长度，长的linker，需要长的spacer，反之亦然。
两端切割后，产生DSB，就会引起系统对其进行修复，Miller等使用TALEN对NTF3基因进行切割，产生DSB，随后进行非同源末端连接（non-homologous end joining, NHEJ）修复，NHEJ在没有同源序列做为模版的情况下进行修复，这是一个不精确的修复途径，结果产生了3-30bp的删除。
NHEJ是容易出错也不好控制的，可喜的是还存在一条精确可控的途径，同源依赖修复（homology dependent repair, HDR），在有供体ssDNA存在的情况下，通过HDR途径，可以对基因进行编辑，插入和缺失处理。
于是牛B的事情就产生了，2012年Nature的文章报道在斑马鱼活体组织里使用TALEN技术，引入了定制的EcoRV位点和修改的loxP序列。
Reference 1. Miller, Jeffrey C., Siyuan Tan, Guijuan Qiao, Kyle A. Barlow, Jianbin Wang, Danny F. Xia, Xiangdong Meng, et al. “A TALE Nuclease Architecture for Efficient Genome Editing.</description>
    </item>
    
    <item>
      <title>如何获取文献</title>
      <link>https://guangchuangyu.github.io/cn/2012/09/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%96%87%E7%8C%AE/</link>
      <pubDate>Mon, 10 Sep 2012 14:53:35 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/09/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%96%87%E7%8C%AE/</guid>
      <description>这个题目又标题党了，不过是share一下一些地球人都应该知道的小tips而已。
据说是电信出口出了问题，学校里这两天大家都在叫pubmed上不去，我反正是上得去，就是慢点。大家好像少了pubmed就无法干活似的，不过也是，正所谓：熟读唐诗三百首，不会作诗也会吟。
1.有备无患
pubmed上不去，完全没影响，因为有hubmed,hubmed主页上写着：An alternative interface to the PubMed medical literature database，所以完全可以把它当作是pubmed的镜像。这个站点至少我在暨大上是超级快的。搜完底上还有链接，让你很方便地用同样的关键词在google (scholar)，Scirus, CrossRef，EBIMed等其它数据库里搜。
另外一个备选的站点是gopubmed，这个站点的亮点是整合了ontology。
最近欧洲大名鼎鼎的EBI也开始搞文献服务了，新开的Europe PubMed Central，我比较喜欢它的排序功能，可以按文章的相关性或引用数来排。除了文献之后，还可以biological patents, clinical guidelines, PhD theses and research reports。这个站点现在刚创立，我觉得一两年之后，肯定会有更多的服务提供，前途无量啊。
 文献管理 读文献是人干的事，管理文献却是疯子干的事。如果你还活在手工整理文献的黑客帝国里，请赶紧吞下红色药丸。  3.个性化推荐 上网买本书，电商都会推荐给你，某本书可能你也想买。这是个性化推荐的时代，读文献也不例外，Google Scholar的新功能My updates，干的就是这个事，可以根据自己文章的内容，推荐相关的最新文献，想要用到这个功能，你需要建立google scholar profile页面。
4.订阅 RSS改变了人类的阅读，很多的期刊都提供了RSS，如果你是火星人，不知道啥是RSS，那么打开你的QQ邮箱，点一下阅读空间，那玩意实现的就是RSS订阅了。个人比较推荐google reader。
另一个值得一提的是NCBI的个性化服务My NCBI，你可以设定关键词，当pubmed上有新文献和这个关键词匹配的话，NCBI可以定期给你发邮件提醒。
5.求文献
科研大军越来越庞大，笑到最后的是各大出版社，不是读者给它送钱，就是作者给它送钱，当我们点full text时却被告知没付费么有permission，天下文章一大抄，没得抄是多么的不爽。我以前喜欢在FriendFeed上的references wanted里求下载。不过上friendfeed需要一支红杏出墙来。现在好了，国内的丁香园有个一键求助的功能，是个求文献的好去处。
6.下文献
文献下不了，很多时候是不用求的，sci-hub.org这个代理就是个下文献的好地方，比Phosphoproteome profile of human lung cancer cell line A549这篇文章的网址是http://pubs.rsc.org/en/Content/ArticleLanding/2011/MB/C0MB00055H，把URL加上sci-hub.org这个代理，变成http://pubs.rsc.org.sci-hub.org/en/Content/ArticleLanding/2011/MB/C0MB00055H，就可以下到相应的PDF文件。
欢迎补充。 PS:今天收到一颗树~ </description>
    </item>
    
    <item>
      <title>什么是T 检验</title>
      <link>https://guangchuangyu.github.io/cn/2012/05/%E4%BB%80%E4%B9%88%E6%98%AFt-%E6%A3%80%E9%AA%8C/</link>
      <pubDate>Tue, 29 May 2012 06:17:56 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/05/%E4%BB%80%E4%B9%88%E6%98%AFt-%E6%A3%80%E9%AA%8C/</guid>
      <description>跟某同学讲了T test之后，整理一下。
很多的检验和我们的直觉是一致的，前阵子在一个群里，有管理学院的人问说想看两个样本是不是来自于同一个分布，我叫他画两个CDF，一看就知道。对方说不要看图，我就让他用Kolmogorov-Smirnov Tests。我自己搜了一下，发现ks.test检验的就是拿两个CDF的距离做为统计量，虽然计算很复杂，但是和intuition那是相当一致啊。
最简单也最常用的，莫过于T检验，用我们的直觉就可以理解了，但是我发现不理解还有用错的人也挺多的。
我们要看一个样本的均值是不是等于0，最naive的办法就是看样本的均值和0差别多大。
这个比较之所以naive，因为没有考虑到数据的分布，从上图的两个populations来看，它们的均值都是0，从绿色的分布中抽到一个均值为3的样本，概率并不小，但是从红色的分布中得到这样一个样本，那就是小概率事件。所以不能单纯比较均值，而是要看均值的分布，从上面的populations上看，和数据的离散程度有关。 我们随机抽取100个sample，得到以下的均值分布：
我们需要对均值的离散程度做penalty，那么就可以考虑这样一个统计量mean(x)/SEM, SEM代表standard error of the mean，那么这个统计量比单纯的均值要科学得多。这个统计量，就是学生氏所定义的t。
如果没有大量的样本，是没办法估计SEM的，但是从上面两个图上看，样本间均值的标准误SEM，和总体数据的标准误是正相关的。而总体的标准误可以用样本的标准误,sd(x),来估计。如果我们考虑最简单的形式呢？定义统计量mean(x)/sd(x)。
那么，请等一下，我们还需要考虑到样本量的影响，如果sample size没有影响，那么我们就不需要采集大样本了。从我们的直觉上看，肯定是样本量越大，对总体参数的估计越准确了。
从图上看，还是和直觉很一致。sample size越大，分布越compact，对总体均值的估计也就越准确。那么就需要使用sample size进行加权，把统计量修改为mean(x)/sd(x) * f(n)，其中n为sample size。
我们可以想像，学生氏当年try了几种形式的f(n)，发现sqrt(n)效果最好。于是他就定义了统计量: t = mean(x)/(sd(x)/sqrt(n))。 sqrt(n)效果好，因为sd(x)/sqrt(n)正好是对样本间均值标准误SEM的估计。
我们又可以想像，学生氏当年收集了很多个样本，计算了多个t值，发现这些t值的分布是有规律的，有点像正态分布，学生氏把它定义为t分布，利用t分布的probability density function，就可以计算p-value啦。
上图就是从标准正态分布里抽取100个样本，所计算的t值分布。
很多人上课学不懂，我觉得是因为一上来告诉你t怎么算，但是没让你理解SEM，SEM是理解t值计算的关键。
算完t之后，一句话，符合t分布，然后就是查表看p值,或者让计算机算，太抽象，这世界本来没有t分布，是学生氏定义了t统计量，并发现符合某分布，把它定义为t分布，有计算机做simulation，重现这个过程，就不抽象了，也就好理解了。
至于两样本，如果是paired的话，那就是paired之间相减，用差值做单样本t检验。如果不是成对，那就是t=(mean(x1)-mean(x2))/SEDM.
其中SEDM代表standard error of difference of means，这里有一个pool与否的问题，SEDM看上去稍微复杂了一点点，但是basic idea是一样的，非常好理解。</description>
    </item>
    
    <item>
      <title>enrichment analysis</title>
      <link>https://guangchuangyu.github.io/cn/2012/04/enrichment-analysis/</link>
      <pubDate>Sat, 28 Apr 2012 08:06:05 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/04/enrichment-analysis/</guid>
      <description>&lt;p&gt;经常看到一些饼图，描述某些事物的组成，比如说有钱人的学历分布，然后我们可以看到高学历所占比例并不高，根据这个比例下结论通常是错的，这些比例说明不了问题，如果把各种学历在总体人口中的分布做为背景进行考虑的话，你就会发现学历还是有点用的。
当我们用组学测定了一大堆分子之后，我们希望站在更高的角度去看这些分子和那些生物学过程相关。那么通常各种注释，对这些基因/蛋白进行分类，那么从分类的比例上，是不能草率下结论，正如上面有钱人学历分布的例子一样。我们需要把总体的分布考虑进去。
和某个注释/分类是否有相关性，把基因分成属于这一类，和不属于这一类两种，这就好比经典统计学中的白球和黑球的抽样问题。也可以列一个２x２的表，进行独立性分析。
以文章&lt;a href=&#34;http://cancerres.aacrjournals.org/content/62/16/4722&#34;&gt;Gene Expression in Ovarian Cancer Reflects Both Morphology and Biological Behavior, Distinguishing Clear Cell from Other Poor-Prognosis Ovarian Carcinomas&lt;/a&gt;所鉴定的差异基因为例。

73个差异基因的Symbol，我把它转为 entrezgene
ID得到57个（漏掉的不管它，只是做为一个例子）:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Support Vector Machine</title>
      <link>https://guangchuangyu.github.io/cn/2012/04/support-vector-machine/</link>
      <pubDate>Thu, 12 Apr 2012 05:37:55 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/04/support-vector-machine/</guid>
      <description>&lt;p&gt;支持向量机(Support Vector Machines, SVM)最初由Vladimir
Vapnik于1997年提出，SVM最简单的形式就是找出一下区分界限（descision
boundary），也称之为超平面(hyperplane)，使得离它最近的点（称之为support
vectors）与之间隔最大。
&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2012/04/linearSVM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这和logistic regression有些相似，区别在于logistic
regression要求所有的点尽可能地远离中间那条线，而SVM是要求最接近中间线的点尽可能地远离中间线。也就是说SVM的主要目标是区分那些最难区分的点。&lt;/p&gt;

&lt;p&gt;SVM对于hyperplane的定义，在形式上和logistic regression一样,logistic
regression的decision boundary由$\theta^TX=0$确定,SVM则用$w^TX+b=0$表示,其中b相当于logistic regression中的$\theta_0$，从形式上看，两者并无区别，当然如前面所说，两者的目标不一样，logistic regression着眼于全局，SVM着眼于support
vectors。有监督算法都有label变量y，logistic
regression取值是&lt;code&gt;{0,1}&lt;/code&gt;，而SVM为了计算距离方便，取值为&lt;code&gt;{-1,1}&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Hackintosh</title>
      <link>https://guangchuangyu.github.io/cn/2012/03/installing-hackintosh/</link>
      <pubDate>Thu, 15 Mar 2012 04:47:26 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/03/installing-hackintosh/</guid>
      <description>&lt;p&gt;初中时在杂志上看到苹果的彩壳机，从此叔就开始成为了苹果的脑残粉，还在K6-2和win98那会，就在玩macintosh主题。&lt;/p&gt;

&lt;p&gt;本科时，通过&lt;a href=&#34;http://pearpc.sourceforge.net/&#34;&gt;PearPC&lt;/a&gt;来虚拟PowerPC，硬是在ATHLON XP 1700+这个破CPU上破了OS X Jaguar，那个慢啊，是无法忍受的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>happy valentine</title>
      <link>https://guangchuangyu.github.io/cn/2012/02/happy-valentine/</link>
      <pubDate>Tue, 14 Feb 2012 05:37:55 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/02/happy-valentine/</guid>
      <description>今天看到统计之都上的情人节心形图。
这次画的心形函数是： $ x = 16 (sin t)^3$ $ y = 13 cos t - 5 cos 2t - 2 cos 3t - cos 4t$
尝试用ggplot2来画，结果如下： 代码见Github.
类似的心形图以前也是画过的，当然这样的函数图有很多，详见http://www.mathematische-basteleien.de/heart.htm，画起来也很容易。
倒是以前画过的蝙蝠侠logo，更有成就感些。</description>
    </item>
    
    <item>
      <title>violin plot</title>
      <link>https://guangchuangyu.github.io/cn/2012/02/violin-plot/</link>
      <pubDate>Tue, 07 Feb 2012 06:31:55 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2012/02/violin-plot/</guid>
      <description>&lt;p&gt;ggplot2 0.9.0版本将在3月1号发布，改动较大，最近bioc mailing
list也有诸多讨论，因为它导致了某些包编译出错（估计是NAMESPACE引起的）。&lt;/p&gt;

&lt;p&gt;按照hadley的说法是这是为了把他个人的项目变成一个社区项目。&lt;/p&gt;

&lt;p&gt;大多数的改动对用户来说是invisible的，用roxygen2去注释函数，核心代码使用S3重写，分离出一些特性（scales包）等。&lt;/p&gt;

&lt;p&gt;最明显的是现在画图速度变快了，不过我觉得最让人兴奋的是&lt;code&gt;guide_legend()&lt;/code&gt;和&lt;code&gt;guide_colorbar()&lt;/code&gt;两个函数，可以修改legend.&lt;/p&gt;

&lt;p&gt;画图的话，加了四个函数&lt;code&gt;geom_map()&lt;/code&gt;, &lt;code&gt;geom_raster()&lt;/code&gt;,&lt;code&gt;geom_dotplot()&lt;/code&gt;和&lt;code&gt;geom_violin()&lt;/code&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>love function plot</title>
      <link>https://guangchuangyu.github.io/cn/2011/08/love-function-plot/</link>
      <pubDate>Sat, 06 Aug 2011 05:37:55 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2011/08/love-function-plot/</guid>
      <description>今天在微博上看到这坑爹的方程： $ (x^2+y^2-1)^3 = {x^2} {y^3}$
画出来如下：
跟个屁股似的，sigh&amp;hellip;
翻出azalea的老文：http://azaleasays.com/2008/06/18/fomula-of-love/
用ggplot2画一下这个爱的方程：$17x^2-16|x|y+17y^2 = 225 $
x &amp;lt;- seq(-sqrt(17), sqrt(17), 0.001) y1 &amp;lt;- 8*abs(x)/17 + 15* sqrt(17 - x^2)/17 y2 &amp;lt;- 8*abs(x)/17 - 15* sqrt(17 - x^2)/17 d &amp;lt;- data.frame(x=c(x,x),y=c(y1,y2)) require(ggplot2) p &amp;lt;- ggplot(d, aes(x,y)) p + geom_point(color=&amp;quot;red&amp;quot;)  还可以画出红心，适合今天七夕的日子。
p + geom_line(color=&amp;quot;red&amp;quot;)  画函数图，这种事情，还是用CAS方便点。
通过maxima来画，一条指令就行，还不用解方程：
contour_plot(17*x^2-16*abs(x)*y+17*y^2-225, [x,-sqrt(17),sqrt(17)],[y,-15*sqrt(17)/17, sqrt(17)])  </description>
    </item>
    
    <item>
      <title>IBW2011</title>
      <link>https://guangchuangyu.github.io/cn/2011/07/ibw2011/</link>
      <pubDate>Mon, 18 Jul 2011 04:26:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2011/07/ibw2011/</guid>
      <description>&lt;p&gt;开完了IBW这个会，感觉比较面向学生，会议前的龙星课程，倒是不错，我就冲着它的题目过去的，我想听的是概率图模型和系统生物学，结果只有最后一天，早上讲了点bayesian network，下午讲了会GSEA，BN讲的只是基本的概念，GSEA讲的内容还不到位，只讲到fisher&amp;rsquo;s test做enrichment analysis，并没有讲如何把表达量通过某些方法把它转化为统计量，再进行enrichment analysis，没有考虑表达量，是不叫GSEA的，提出GSEA的那篇PNAS文章，讲的就是expression+prior knowledge (gene set)。&lt;/p&gt;

&lt;p&gt;几天的时间，基本上是讲Hidden Markov Model用于序列比对，Prof Tang以前是在Waterman那里做post-doc，估计也是搞了很长时间的序列。我对这块兴趣不大。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a simple gene finder</title>
      <link>https://guangchuangyu.github.io/cn/2011/07/a-simple-gene-finder/</link>
      <pubDate>Sun, 10 Jul 2011 09:04:46 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2011/07/a-simple-gene-finder/</guid>
      <description>&lt;p&gt;上了几天的课，&lt;a href=&#34;http://ibw2011.fmmu.edu.cn/schedule.htm&#34;&gt;http://ibw2011.fmmu.edu.cn/schedule.htm&lt;/a&gt;
今天就上完了，只完成了project 1，想写gibbs sampling，但是没搞明白，汗。&lt;/p&gt;

&lt;p&gt;这个纯属练习用，没啥实用价值。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Course Projects:&lt;/p&gt;

&lt;p&gt;Project 1: Implementation of a simple gene finder&lt;/p&gt;

&lt;p&gt;GOAL&lt;/p&gt;

&lt;p&gt;Build a simple codon-usage based gene finder for finding genes in
E.coli.&lt;/p&gt;

&lt;p&gt;Procedure&lt;/p&gt;

&lt;p&gt;Collect 100 gene sequences from the bacterium E. coli in the genbank
(&lt;a href=&#34;http://www.ncbi.nlm.nihh.gov&#34;&gt;http://www.ncbi.nlm.nihh.gov&lt;/a&gt;). Compute the codon usage table based on
these genes (and the translated protein sequences from them); Build a
probabilistic model based on the codon usages; Implement a random
sequence model in which the nucleotide frequency is computed from the
100 E. coli genes. For a given DNA sequence (and one selected reading
frame), compare your model with a random sequence model; Results that
you should submit:&lt;/p&gt;

&lt;p&gt;Two FASTA files for the collected 100 genes and 100 translated protein
sequences; The printed codon usage table; A program named ECgnfinder,
running with the syntax as ECgnfinder –i inputfile&lt;/p&gt;

&lt;p&gt;Inputfile stands for the name of input file, which should contain one
DNA sequence in FASTA file format; the program should be able to
report an error message if the input file is in the wrong format.&lt;/p&gt;

&lt;p&gt;The output should be printed to the standard output as (xxx stands for
the likelihood)&lt;/p&gt;

&lt;p&gt;ORF1: xxx ORF2: xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>screen shot</title>
      <link>https://guangchuangyu.github.io/cn/2011/06/screen-shot/</link>
      <pubDate>Tue, 28 Jun 2011 12:17:30 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2011/06/screen-shot/</guid>
      <description>&lt;p&gt;买了苹果机，一直放在家里没用，准备开会带去用，拿过来装几个软件。&lt;/p&gt;

&lt;p&gt;校园网用锐捷是个比较讨厌的东西。当年在华农，光这&lt;a href=&#34;http://guangchuangyu.github.io/2005/03/scau%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81/&#34;&gt;认证&lt;/a&gt;就搞了很久。&lt;/p&gt;

&lt;p&gt;现在开源的认证客户端多了，搞起来也方便了，现在在linux下用的&lt;a href=&#34;http://code.google.com/p/xmuruijie/&#34;&gt;xmuruijie&lt;/a&gt;，就比当年&lt;a href=&#34;http://guangchuangyu.github.io/2005/03/scau%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81/&#34;&gt;mystar&lt;/a&gt;好用。&lt;/p&gt;

&lt;p&gt;估计xmuruijie也是可以在苹果机上用的，依赖python，搞不好还有些modules要装，懒得去弄，搜了一下，找到&lt;a href=&#34;http://code.google.com/p/mentohust/&#34;&gt;mentohust&lt;/a&gt;，当然需要改一下mac address，用万能的ifconfig搞定。&lt;/p&gt;

&lt;p&gt;为了编译软件，必要先装xcode，这个大家伙，4G多，中午挂到吃晚饭才下完。
然后就可以装各种open source的软件。&lt;/p&gt;

&lt;p&gt;mac上有fink支持debian一样的apt-get，还有原生的macport，gentoo的portage也支持，我选择使用&lt;a href=&#34;http://guangchuangyu.github.io/categories/bsd&#34;&gt;netbsd&lt;/a&gt;的pkgsrc来安装各种开源软件。&lt;/p&gt;

&lt;p&gt;以前用过比较长时间的netbsd，用着比较顺手。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Five things biologists should know about statistics</title>
      <link>https://guangchuangyu.github.io/cn/2011/06/five-things-biologists-should-know-about-statistics/</link>
      <pubDate>Fri, 24 Jun 2011 06:10:37 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2011/06/five-things-biologists-should-know-about-statistics/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.ebi.ac.uk/~birney/&#34;&gt;Ewan Birney&lt;/a&gt;最近的一篇博文（&lt;a href=&#34;http://genomeinformatician.blogspot.com/2011/06/five-statistical-things-i-wished-i-had.html&#34;&gt;Five statistical things I wished I had been taught 20 years ago&lt;/a&gt;
）讲述了统计对于生物学的重要性。&lt;/p&gt;

&lt;p&gt;一开始从RA Fisher讲起，说生物压根就是统计。Fisher是个农业学家，他所建立的那些统计方法，都是从生物学问题出发。&lt;/p&gt;

&lt;p&gt;Ewan所谈及的五个方面分别是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. Non parametric statistics. These are statistical tests which make a
bare minimum of assumptions of underlying distributions; in biology we
are rarely confident that we know the underlying distribution, and hand
waving about central limit theorem can only get you so far. Wherever
possible you should use a non parameteric test. This is Mann-Whitney (or
Wilcoxon if you prefer) for testing &amp;ldquo;medians&amp;rdquo; (Medians is in quotes
because this is not quite true. They test something which is closely
related to the median) of two distributions, Spearman&amp;rsquo;s Rho (rather
pearson&amp;rsquo;s r2) for correlation, and the Kruskal test rather than ANOVAs
(though if I get this right, you can&amp;rsquo;t in Kruskal do the more
sophisticated nested models you can do with ANOVA). Finally, don&amp;rsquo;t
forget the rather wonderful Kolmogorov-Smirnov (I always think it sounds
like really good vodka) test of whether two sets of observations come
from the same distribution. All of these methods have a basic theme of
doing things on the rank of items in a distribution, not the actual
level. So - if in doubt, do things on the rank of metric, rather than
the metric itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phosphoproteome profile of human lung cancer cell line A549</title>
      <link>https://guangchuangyu.github.io/cn/2010/11/phosphoproteome-profile-of-human-lung-cancer-cell-line-a549/</link>
      <pubDate>Tue, 23 Nov 2010 02:22:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2010/11/phosphoproteome-profile-of-human-lung-cancer-cell-line-a549/</guid>
      <description>As an in vitro model for type II human lung cancer, A549 cells resist cytotoxicity via phosphorylation of proteins as demonstrated by many studies. However, to date, no large-scale phosphoproteome investigation has been conducted on A549. Here, we performed a systematical analysis of the phosphoproteome of A549 by using mass spectrometry (MS)-based strategies. This investigation led to the identification of 337 phosphorylation sites on 181 phosphoproteins. Among them, 67 phosphoproteins and 230 phosphorylation sites identified appeared to be novel with no previous characterization in lung cancer.</description>
    </item>
    
    <item>
      <title>中国人民的翻墙情结</title>
      <link>https://guangchuangyu.github.io/cn/2010/10/the-chinese-complex-of-cross-wall/</link>
      <pubDate>Mon, 11 Oct 2010 13:18:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2010/10/the-chinese-complex-of-cross-wall/</guid>
      <description>&lt;p&gt;不知道空窗期这个词是怎么来的，按照合理的推论应该是来自于西方，泊来之词。&lt;/p&gt;

&lt;p&gt;空窗期顾名思义就是没人来爬自己的窗户，引申出来就是没人来找自己约会。这个符合西方的建筑特点，西方的建筑是立体的，体现出来就是窗户多。而爬窗约会也多次出现于西方的文学和影视作品中。《红与黑》中就有于连拿着个梯子，爬窗去偷情的描写。&lt;/p&gt;

&lt;p&gt;而我们中国人的建筑是平面型的，体现在墙多，所以说，中国人的单身阶段应该称之为空墙期，意谓没人来翻墙。&lt;/p&gt;

&lt;p&gt;苏轼曾做过一首词，名谓《蝶恋花》。词中有云：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;花褪残红青杏小。
燕子飞时，绿水人家绕。
枝上柳绵吹又少。
天涯何处无芳草。

墙里秋千墙外道。
墙外行人，墙里佳人笑。
笑渐不闻声渐悄。
多情却被无情恼。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Xming-windows下远程linux桌面</title>
      <link>https://guangchuangyu.github.io/cn/2010/07/xming-windows%E4%B8%8B%E8%BF%9C%E7%A8%8Blinux%E6%A1%8C%E9%9D%A2/</link>
      <pubDate>Mon, 05 Jul 2010 07:37:09 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2010/07/xming-windows%E4%B8%8B%E8%BF%9C%E7%A8%8Blinux%E6%A1%8C%E9%9D%A2/</guid>
      <description>&lt;p&gt;机房放着台机架机，闲着也是耗电，平时偶尔用putty登上去，没有图形界面还是有些不方便。&lt;/p&gt;

&lt;p&gt;搜了一下，发现好几个软件可做这样的事，Xming是开源的，所以选择使用Xming+putty来远程连linux的桌面。&lt;/p&gt;

&lt;p&gt;试用了一下，果然不错。&lt;/p&gt;

&lt;p&gt;需要修改/etc/ssh/sshd_config，添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X11Forwrding yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要配置一下PuTTY，&lt;code&gt;Connection-SSh-X11&lt;/code&gt;中选中&lt;code&gt;Enable X11forwarding&lt;/code&gt;
其中&lt;code&gt;X display location&lt;/code&gt;里填入&lt;code&gt;localhost:0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;运行Xming，再用putty连到服务器上，运行程序，就OK了。就好像windows下的本地程序一般。整合性很好。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrap Method</title>
      <link>https://guangchuangyu.github.io/cn/2009/07/bootstrap-method/</link>
      <pubDate>Fri, 31 Jul 2009 09:14:42 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2009/07/bootstrap-method/</guid>
      <description>&lt;p&gt;[bootstrap](&lt;a href=&#34;http://en.wikipedia.org/wiki/Bootstrapping_(statistics))是对观测数据集进行有放回（replacement）的随机抽样，以评估总体的各项统计指标。可以用于假设检验、参数估计。好处是并不要求大样本，也不要求正态数据，并且对于不同的统计指标使用的是同样的计算方法。结果也更为可靠，坏处是计算量大。&#34;&gt;http://en.wikipedia.org/wiki/Bootstrapping_(statistics))是对观测数据集进行有放回（replacement）的随机抽样，以评估总体的各项统计指标。可以用于假设检验、参数估计。好处是并不要求大样本，也不要求正态数据，并且对于不同的统计指标使用的是同样的计算方法。结果也更为可靠，坏处是计算量大。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;统计推断(statistical inference)是基于样本统计值的抽样分布来计算的，抽样分布需要从总体中许多的样本来计算，在只有一个样本的情况下，bootstrap对这一随机样本进行有放回的重复抽样，每一个重抽样本与原始随机样本一样大，每次计算相应的抽样的统计值，重复了N次之后，就可以计算统计值的bootstrap分布。&lt;/p&gt;

&lt;p&gt;下面做一个小小的试验：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;lt;- c(seq(1:10), rnorm(50))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#创建一个样本，60个数据，非正态分布的，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2009/07/sample_a.png&#34; alt=&#34;&#34; title=&#34;sample_a&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>创建R包</title>
      <link>https://guangchuangyu.github.io/cn/2008/12/creat-r-package/</link>
      <pubDate>Sun, 07 Dec 2008 05:23:16 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/12/creat-r-package/</guid>
      <description>&lt;pre&gt;&lt;code&gt;&amp;gt; source(&amp;quot;code.R&amp;quot;) #载入写好的代码 
&amp;gt; package.skeleton(name=&amp;quot;pkgname&amp;quot;, list=c(&amp;quot;function_name_list&amp;quot;))
# 生成R源码包的目录结构 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到man目录下改*.Rd文档。latex格式。这是包和函数的帮助文档。&lt;/p&gt;

&lt;p&gt;如果需要vignette文档的话。在包目录下，新建inst/doc，在里面写pkgname.Rnw文档。基本上是latex格式，不过允许你插入R代码。make的时候，会先跑代码。再自动转换成latex，再编译成pdf。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ R CMD check pkgname 
# 检验代码和文档。这个很重要。通常一些小问题都能在这一步发现。 
$ R CMD build pkgname 
# 打包，源码包格式 
$ R CMD build --binary pkgname
#编译后打包，二进制格式。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用中值定理求根</title>
      <link>https://guangchuangyu.github.io/cn/2008/11/bisect-to-solve-equation/</link>
      <pubDate>Tue, 25 Nov 2008 10:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/11/bisect-to-solve-equation/</guid>
      <description>&lt;p&gt;翻看了以前写的&lt;a href=&#34;https://guangchuangyu.github.io/cn/2007/06/newton-raphson-method/&#34;&gt;使用Newton-Raphson Method求一个数的开方&lt;/a&gt;，想到其实也可以用中值定理来实现。
中值定理：f(x)是一个连续性的函数，在[u,v]区间内，当c的值位于f(u)和f(v)之间时，至少存在一个点，满足f(x) = c 当f(u)和f(v)一正一负时，那么在[u,v]之间至少有一个根的存在，这个定理本来就是拿来证明根的存在的，但是其实也可以用来求解根。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生物实验的基本原理</title>
      <link>https://guangchuangyu.github.io/cn/2008/11/basic-principle-of-biological-experiment/</link>
      <pubDate>Tue, 25 Nov 2008 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/11/basic-principle-of-biological-experiment/</guid>
      <description>几年前自己总结出来的，就两个字“标记”，可以概括大部分的生物学实验的基本原理。 这个方法，中国人民老早就在用了，八仙张果老成仙那段，张果老吃的人参精，就是因为被弄了根绣花针才被捉的，还有蓝色的葫芦娃，会隐身，小时候看的，记不清怎么被捉的，肯定也是被标记了。。
生物学实验都是些看不见，摸不着的东西，所以基本上都是使用这个方法，看不见的，我们拿看的见的去标记它，测不着的或者不好测的，拿可以测容易测的去标记它。很多的实验手段，其实最初都是很简单的，为了提高灵敏度和精度，不断改进，越来越烦琐，抑或者出现了一些分支。通常这时候，最初那个简单的，最根本的东西就被人所忘记。看到的尽是表面上的细节。至少现在的书太二了，本来基本上一样的实验，阐述原理的时候被描成了两样的东西。
同位素标记，荧光标记自不用说。芯片实验也是标记，array上的spot序列是已知的，它会跟什么基因杂交，也是已知的。我们并不知道会有什么基因表达，但是当抽提的东西，跟某个spot有杂交信号的时候，我们就知道某个基因有表达。这就是标记。还有我们需要知道表达的量，这个依然不好测。同样也是使用标记，用cy3或cy5来标记，通过检测荧光的强度，就知道了表达的量。
所有的杂交实验都是标记，southern blot, northern blot, western blot都是。不管是核酸还是蛋白，不管它是用什么介质。都是用一个已知的，去标记一个未知的。通过测已知来估计未知的东西。
跑胶的时候，拿去紫外灯光下看。同样也是因为标记。DNA我们是看不到的，但是在DNA下嵌入了EB，可以在紫外灯光下看到EB，所以我们也就看到DNA。
所有的切片，都是在做标记，不管是用于光镜还是电镜，其实电镜本身和光镜是没本质区别的，因为可见光的波长范围很有限，电子也是一种波，成像原理是一样的，只是我们不能直接看到而已。使用电子是为了突破可见光的局限而已，使用光镜需要对细胞进行染色，使用电镜也是一样，不过染的不是染料，而是金属。
测蛋白，用考马斯亮蓝染。在280nm有吸收，那是因为苯环的共轭电子对。虽然不是标记上去的，但也可以这么想，反正是测一个我们已知的东西，来估计未知道的东西。
DNA测序，给四种碱基标上不同的荧光。
还记得脂肪代谢是怎么被揭开的吗？使用接了苯环的脂肪酸喂马，收集马尿去检验，因为马不能代谢苯环。所以拿苯环去标记脂肪酸。
还有那个DNA还是蛋白是遗传物质的实验，肺炎双球菌实验。分别用S和P的同位素标记蛋白和DNA。
还有一些看似不是标记的，其实也是标记，比如酵母双杂交，因为转录因子都有一个DNA-binding domain和一个RNA-binding domain，我们并不能直接检测到蛋白X和Y是否有相互作用，但我们可以表达溶合蛋白DBD-X和RBD-Y，如果XY有相互用用的话DBD和RBD就会在一起，就是一个有功能的转录因子，就可以转录报告基因，检测到报告基因，就表明了XY有相互作用，这就是标记，拿DBD和RBD去标记X和Y，通过DBD和RBD的行为去估计X和Y的行为。
DNA重组也使用标记，我们无法直接检测到是否重组了，是否在需要的位点重组了，所以使用了报告基因来做标记，检测到报告基因了，表明重组了，使用抗药基因，在加了药物的培养基上筛选，活下来的表明重组正确。当然有假阳性。抗药基因也是“标记”。
基本上绝大多数的实验原理，最根本的一个想法，就是使用一个已知的，或者容易检测的，去标记一个未知的，或是难以检测的。
实验的手段太多了，很多人搞不清原理。做实验的人，通常就是照着实验手册，一步一步在加东西而已。只要稍微思考一个，很多东西，其实不用记。细节的东西不需要记，需要的时候查就行了，当是基本的原理还是需要理解的。不然白学了。
很多人觉得生化就是一堆描述性的实验结果。其实很多东西也是不需要记的。举个例子，比如说DNA转录的时候，组蛋白会被乙酰化，这个细节很多人就是死记下来的，当然国内的书太二了，很多书没说乙酰化的位点是Arg和Lys，不过告诉这个事实，很多人还是死记下来。其实想一下，理解了，就不用记。为什么是这两个AA，而不是其它的？组蛋白之所以带正电就是因为富含这两个AA，这两个AA都有-NH，带正电，正是由于乙酰化了这两个位点，屏蔽了正电，DNA是带负电的，所以乙酰化之后正负电引力变小了，结构就松散了。有利于转录。这个东西就变得理所当然一样，根本不需要记。</description>
    </item>
    
    <item>
      <title>曝一下我的google reader</title>
      <link>https://guangchuangyu.github.io/cn/2008/11/my-google-reader/</link>
      <pubDate>Sun, 23 Nov 2008 04:32:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/11/my-google-reader/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2008/11/rss.png&#34; alt=&#34;rss&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生物研究=盲人摸象？</title>
      <link>https://guangchuangyu.github.io/cn/2008/10/blind-approach/</link>
      <pubDate>Fri, 17 Oct 2008 00:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/10/blind-approach/</guid>
      <description>生物研究=盲人摸象？ 今天看了一篇文章Can a biologist fix a radio?, 作者讲了个悖论，越多事实的积累，对于所研究的process理解的越少。
这确实是现在的现实。许多的科研结果，其实就是便这个本来很混乱的世界更加混乱。文中还讲到了科研的淘金热。昨天我正好看到了science上的文章说impact factor fever。当科研成为一种职业，真正对科学有热情的scientist并不多，更多的人仅仅是为了拿grant，要拿grant，就要发高分的文章，哪里好发文章，那里就有一堆人在抢。顺带一下，大家都说生物是火坑，其实学科在发展的初期，对于科研人员来说还是有利的。如果说工作的话，确实是火坑，其实生物是个暴利行业，如果你身在火海中，那是因为你处于生物链的最底层。
文中说的科研方法，是带有讽刺口吻的。其实也不可笑，上个世纪初，物理界也是拿一个粒子去撞另一个粒子，然后观察现像。科学发展的最初都是在堆积事实。况且做科研的人也不见得聪明。书读得多不见得是一件值得高兴的事，我们只是知道了被抽象的大千世界中的一个小角落而已。就像《黑天鹅》里说的故事一样，抛99次硬币，都是正面朝上，问一个博士，第100次朝上的概率是多少，他脱口而出，50%，每次试验都是独立，前面的事实并不影响后面，贝努力试验嘛，书上学的。但是99次都朝上，这硬币肯定被做过手脚。所以说读书读到啥的人才会说50%.
这么多年的研究，生物界已经堆积了足够多的事实了，但是却连一个简单的生化途径都说不清，道不明。对于单个分子的跟踪真的有意义吗？首先真的能完全捕捉到分子的所有行为吗？就像量子力学中的测不准原理，测准了速度，就无法确定位置，确定了位置，就测不准速度。就算测得准，分子是没有生命现像的。至少要以细胞为最低的单位。就算你知道了所有的分子功能。拼在一起，你还是不能了解生命的现象。就像物理学中的布朗运动，所有分子的运动都是杂乱的，测了也没用。但宏观上，却有规律可循。亦或者半衰期，所有的分子在一个半衰期里会有一半的衰变，但那一个衰变了，我们并不能确定，为什么是它衰变，而不是别的分子，也无法确定，但一堆分子，整体上却是按着规律来的。
作者说从系统的角度来会是一个出路，但是至少从目前来看，我觉得系统生物学也是在制造混乱。paradigm-shift是很痛苦的，很多是打着系统的名义在做更高层次的分解的工作。
很多东西都属于初期，比如网络中边的连接，都是基于布尔值，要么是1要么是0,而真正的事实不会是开关型的。
最后最搞笑的是，作者竟然说学BASIC，这种imperative的语言，是不适合于复杂系统的研究的。我所会的编程语言都是imperative的。囧~~~，这种paradigm要求程序员从计算机的角度思考问题，写程序就是告诉计算机第一步做什么，然后第二步做什么，如此反复。不够abstract，做复杂系统的话会吐血的。像lisp这样的functional programming language在AI的研究上的流行是有原因的。编程上这又得来一次paradigm-shift&amp;hellip;.
不管怎么看，现在的科研就是在盲人摸象。但我们应该有更高的视野，我们需要看到更多的东西。</description>
    </item>
    
    <item>
      <title>Educational Games</title>
      <link>https://guangchuangyu.github.io/cn/2008/10/educational-games/</link>
      <pubDate>Mon, 06 Oct 2008 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/10/educational-games/</guid>
      <description>&lt;p&gt;You don&amp;rsquo;t have to be a genius to understand the work of the Nobel
Laureates. These games and simulations, based on Nobel Prize-awarded
achievements, will teach and inspire you while you&amp;rsquo;re having FUN!
Students, teachers and non-professionals of all ages will enjoy testing
and building their knowledge in physics, chemistry, physiology or
medicine, literature, peace and economics. So, go ahead, Explore and
Learn!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客转WordPress</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/%E5%8D%9A%E5%AE%A2%E8%BD%ACwordpress/</link>
      <pubDate>Tue, 30 Sep 2008 16:20:43 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/%E5%8D%9A%E5%AE%A2%E8%BD%ACwordpress/</guid>
      <description>&lt;p&gt;找了一个叫&lt;strong&gt;博客备份软件&lt;/strong&gt;的小工具,备份了新浪和ChinaUnix上的blog,导出为RSS
2.0, sina的blog导出没问题,但是cu的blog导出后,文不对题.狂汗啊&amp;hellip;
但是生成的xml文件导入到wordpress里不成功.需要改一下才行.&lt;/p&gt;

&lt;p&gt;从导出的xml文件里,把&amp;lt;description&amp;gt;&amp;lt;![CDATA[替换成&amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[&lt;/p&gt;

&lt;p&gt;相应地把]]&amp;gt;&amp;lt;/description&amp;gt;替换成]]&amp;gt;&amp;lt;/content:encoded&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>备份苹果硬盘的数据</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/data-backup/</link>
      <pubDate>Mon, 29 Sep 2008 12:32:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/data-backup/</guid>
      <description>&lt;p&gt;powerbook笔记本装Mac OSX 10.2，我嫌太慢了，&lt;a href=&#34;https://guangchuangyu.github.io/cn/2005/01/powerbook-gentoo/&#34;&gt;就装了gentoo&lt;/a&gt;，所有的东西都是从软件编译，费了很长的时间，CPU太慢了。原来的硬盘只有10G，后来我又换了60G的硬盘，就是现在要备份数据的硬盘了。换硬盘的时候，没有换系统，我从livecd里进去，把系统打包，并对新硬盘进行分区。然后拆机换硬盘，还是从livecd进去，把新硬盘格式化，把原来的硬盘挂上去，把打包的系统解压到新的分区里，并初始化一些系统的设定，把用户数据拷进去。换硬盘不换系统。这个当时没记录下来。后来有一次手痒，重新编译了glibc，把其它的local都去掉，只留下中文的。可是这一次搞了有问题，系统总有点莫名其妙的问题。&lt;/p&gt;

&lt;p&gt;06年，我就想换个系统算了。找人刻了张os9.2的盘，自己刻了张netbsd的盘。&lt;a href=&#34;https://guangchuangyu.github.io/cn/2006/06/os9-netbsd-dual-boot&#34;&gt;装双系统&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;os9.2可以用微软的office 2001，还有ie5.5，不过都不是很好用。最爽的是可以用很多做图软件，photoshop,coredraw,illustrator等等啊。当年在合肥还帮很多同学处理过照片，因为6级考试要上传的图片要求是10k以下，很多人压到10k都看不清了，我用photoshop压到10k还能看清人.^_^.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>教你如何藏不想被看到的日记</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/how-to-hide-diary/</link>
      <pubDate>Tue, 23 Sep 2008 12:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/how-to-hide-diary/</guid>
      <description>&lt;p&gt;有时候心情不好，就会写一些伤感的日记，然后过两天，再拿出来看一下，然后就删了。很经常这样。
其实可以藏起来，绝对超乎一般人的想像。不过我只在本科的时候这样藏过，大叔我不喜欢藏东西。呵呵。。。&lt;/p&gt;

&lt;p&gt;拿出来分享一下，不然烂在我肚子里，也是一无用处的。。。&lt;/p&gt;

&lt;p&gt;YMZ的事件，告诉大家一个真理，当个电脑小白是很吃亏滴。。学会藏东西是很必要的能力。。&lt;/p&gt;

&lt;p&gt;不过我不送修电脑，就是笔记本我也自己拆。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改QQ登录界面</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/modify-qq-login-gui/</link>
      <pubDate>Tue, 23 Sep 2008 08:55:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/modify-qq-login-gui/</guid>
      <description>&lt;p&gt;闲来无聊，改了一下QQ的登录界面。
下面是下载链接，到QQ目录里替换掉原文件。修改的文件是2008正式版的，没有在别的版本下测试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://guangchuangyu.github.io/blog_images/uploads/2008/09/qq_ahmu.rar&#34;&gt;安医版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2008/11/qq_ahmu.jpg&#34; alt=&#34;qq\_ahmu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在64位环境下编译32位的应用程序</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/compile-32bit-applications-in-64bit-linux/</link>
      <pubDate>Tue, 23 Sep 2008 00:18:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/compile-32bit-applications-in-64bit-linux/</guid>
      <description>&lt;p&gt;用PITA算法做靶标预测的时候，要用到ViennaRNA包做结构的折叠，这个包是被修改过的，原来的包在我机子上是可以装的。但是这个修改过的包编译不通过。很奇怪的错误，不知道怎么改。&lt;/p&gt;

&lt;p&gt;好在它有两个版本，64位和32位的。我弄到大型机上去编译32位的，也是出错，不过是命名空间的问题，我改两个头文件就可以通过了。最近又要算。那个大型机最近被搬走了。只能本机上做。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过局域网在linux下使用windows的程序</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/%E9%80%9A%E8%BF%87%E5%B1%80%E5%9F%9F%E7%BD%91%E5%9C%A8linux%E4%B8%8B%E4%BD%BF%E7%94%A8windows%E7%9A%84%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 22 Sep 2008 01:26:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/%E9%80%9A%E8%BF%87%E5%B1%80%E5%9F%9F%E7%BD%91%E5%9C%A8linux%E4%B8%8B%E4%BD%BF%E7%94%A8windows%E7%9A%84%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;用了好多年linux，现在用windows越来越少了，但是还是得用。没办法，上taobao买个东西，上网银都得用ie，有时候还得用office等其它一些软件。&lt;/p&gt;

&lt;p&gt;实验室里有台机子是做文件服务的，装的是windows 2003
server。之前使用rdesktop远程桌面，最近发现配合seamlessrdp可以让rdesktop实现更好的效果，运行windows程序，就像linux中原生程序一样。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; [下载
&amp;gt; seamlessrdp.zip](http://www.cendio.se/files/thinlinc/seamlessrdp/seamlessrdp.zip)
&amp;gt; 解压丢在C盘。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在linux下运行这样的指令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; rdesktop -A -s &amp;quot;c:\\seamlessrdp/seamlessrdpshell.exe C:\\Program
&amp;gt; Files\\Internet Explorer\\iexplore.exe&amp;quot; ip:3389 -u administrator -p
&amp;gt; password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以在linux下运行服务器端的ie了。windows下所有程序都没问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gtkballs -- 五子连线</title>
      <link>https://guangchuangyu.github.io/cn/2008/09/gtkballs/</link>
      <pubDate>Sun, 21 Sep 2008 08:20:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/09/gtkballs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2008/11/gtkballs.png&#34; alt=&#34;gtkballs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从概率的角度看 如何告别单身</title>
      <link>https://guangchuangyu.github.io/cn/2008/08/88-bachelor/</link>
      <pubDate>Tue, 26 Aug 2008 15:10:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/08/88-bachelor/</guid>
      <description>&lt;p&gt;国家人口统计男人比女人多了3700万，在大学校园里更是流传着“我很丑，可是我很抢手”（女生版）、“我很帅，可是我很无奈”（男生版）。&lt;/p&gt;

&lt;p&gt;鉴于大龄猥琐男越来越盛行，以及小平同志说“让一部分人先恋起来嘛”
今日从科学的角度，让大家明白如何告别单身。
授人与鱼不如授人与渔。即使没能让你奔小康，起码也解决温饱~~~&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2008/11/xx0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;告别单身的不二法则，三个字，“厚脸皮”，详见下面分析&lt;/p&gt;

&lt;p&gt;如果一个男人追一个女人，成功的概率只有0.2，
那么连续追6个，至少有一个成功的概率，高达0.74&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 1-0.8^6
[1] 0.737856
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果连续追7个的话，至少一个成功的概率将达到0.79&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 1-0.8^7
[1] 0.7902848
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不是特别差，成功的概率假如是0.3，那么连续追几个的成功概率将更高。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 1-0.7^6
[1] 0.882351
&amp;gt; 1-0.7^7
[1] 0.9176457
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GOSemSim</title>
      <link>https://guangchuangyu.github.io/cn/2008/08/gosemsim/</link>
      <pubDate>Mon, 11 Aug 2008 14:21:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/08/gosemsim/</guid>
      <description>&lt;p&gt;第一次写软件包，计算基因和GO的语义相似性。&lt;/p&gt;

&lt;p&gt;实现&lt;a href=&#34;http://bioinformatics.oxfordjournals.org/cgi/content/full/23/10/1274&#34;&gt;Wang&lt;/a&gt;的方法，基于GO的图结构。
以及四种基于信息含量的计算方法（Resnik, Jiang, Lin, Rel）。&lt;/p&gt;

&lt;p&gt;可以从Bioconductor下载到。
&lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/GOSemSim.html&#34;&gt;http://bioconductor.org/packages/release/bioc/html/GOSemSim.html&lt;/a&gt;
&lt;a href=&#34;http://bioconductor.org/packages/devel/bioc/html/GOSemSim.html&#34;&gt;http://bioconductor.org/packages/devel/bioc/html/GOSemSim.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持human, rat, mouse, fly, yeast, zebrafish,worm, E coli,
arabidopsis等物种。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在linux下对NTFS进行读写</title>
      <link>https://guangchuangyu.github.io/cn/2008/08/ntfs-3g/</link>
      <pubDate>Sat, 09 Aug 2008 04:32:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/08/ntfs-3g/</guid>
      <description>&lt;p&gt;今天发现了一个软件包叫&lt;strong&gt;&lt;em&gt;ntfs-config&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This program allow you to easily configure all of your NTFS devices to
allow write support via a friendly gui. For that use, it will
configure them to use the open source ntfs-3g driver. You&amp;rsquo;ll also be
able to easily disable this feature.
Homepage : &lt;a href=&#34;http://givre.cabspace.com/ntfs-config&#34;&gt;http://givre.cabspace.com/ntfs-config&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Homepage of ntfs-3g :
&lt;a href=&#34;http://www.ntfs-3g.org/&#34;&gt;http://www.ntfs-3g.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Screen使得远程终端更加有效率</title>
      <link>https://guangchuangyu.github.io/cn/2008/08/screen%E4%BD%BF%E5%BE%97%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%8A%A0%E6%9C%89%E6%95%88%E7%8E%87/</link>
      <pubDate>Fri, 08 Aug 2008 12:40:22 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2008/08/screen%E4%BD%BF%E5%BE%97%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%8A%A0%E6%9C%89%E6%95%88%E7%8E%87/</guid>
      <description>根据主页Screen的描述
 “Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells. Each virtual terminal provides the functions of the DEC VT100 terminal and, in addition, several control functions from the ANSI X3.64 (ISO 6429) and ISO 2022 standards (e.g., insert/delete line and support for multiple character sets). There is a scrollback history buffer for each virtual terminal and a copy-and-paste mechanism that allows the user to move text regions between windows.</description>
    </item>
    
    <item>
      <title>screenshot</title>
      <link>https://guangchuangyu.github.io/cn/2007/06/screenshot/</link>
      <pubDate>Sat, 16 Jun 2007 00:18:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/06/screenshot/</guid>
      <description>&lt;h2 id=&#34;os-9-2&#34;&gt;OS 9.2&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2007/06/os9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Newton-Raphson Method估算函数的根</title>
      <link>https://guangchuangyu.github.io/cn/2007/06/newton-raphson-method/</link>
      <pubDate>Sat, 02 Jun 2007 13:53:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/06/newton-raphson-method/</guid>
      <description>&lt;h2 id=&#34;newton-raphson-method&#34;&gt;Newton-Raphson Method&lt;/h2&gt;

&lt;p&gt;曲线&lt;code&gt;f(x)&lt;/code&gt;有根c,取曲线上一点$(x_1,f(x_1))$, 过此点的切线交x轴$x_2$,过曲线上$(x_2,f(x_2))$的切线交x轴$x_3$，如此反复得到一个序列 $x_1,x_2,\cdot \cdot \cdot,x_n$ 逼近c值.&lt;/p&gt;

&lt;p&gt;过$(x_n,f(x_n))$的切线方程为 $y-f(x_n) = f&amp;rsquo;(x_n)\,(x-x&lt;em&gt;n)$,假设此方程与x轴的交点为$x&lt;/em&gt;{n+1}$, 即有: $0 - f(x_n) = f&amp;rsquo;(x_n)(x_n+1 - x&lt;em&gt;n)$， 即$x&lt;/em&gt;{n+1} = x_n - \frac{f(x_n)}{f&amp;rsquo;(x_n)}$ &lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;下面利用此法来求一个数的开方。 $f(x) = x^2 - a$ 有根$\sqrt{a}$,
由$f&amp;rsquo;(x_n) = 2x&lt;em&gt;n$, 代入式&lt;code&gt;&amp;lt;Eq. 1&amp;gt;&lt;/code&gt;可得$x&lt;/em&gt;{n+1} = (x_n + a/x_n)/2$; 当i -&amp;gt; INF 时, $x_i$ -&amp;gt; $\sqrt{a}$;&lt;/p&gt;

&lt;h2 id=&#34;c-implementation&#34;&gt;C implementation&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我制作的pkgsrc</title>
      <link>https://guangchuangyu.github.io/cn/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/</link>
      <pubDate>Wed, 16 May 2007 04:36:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/05/%E6%88%91%E5%88%B6%E4%BD%9C%E7%9A%84pkgsrc/</guid>
      <description>&lt;h2 id=&#34;xlyrics-unix下的歌词秀软件&#34;&gt;xlyrics: unix下的歌词秀软件   &lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://files.getdropbox.com/u/774072/software/pkgsrc/xlyrics-0.4.6.tar.bz2&#34;&gt;点此下载&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;eva-kde下的qq客户端&#34;&gt;EVA: KDE下的QQ客户端     &lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://files.getdropbox.com/u/774072/software/pkgsrc/eva-20070327.tar.bz2&#34;&gt;点此下载&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cd /usr/pkgsrc/wip-cn 
#tar xjvf eva.tar.bz2 
#cd eva 
#make install clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以啦。在我的机子（NetBSD 3.0.1 macppc）上测试通过。。
更新到eva-20070327&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Edit partition table in NetBSD/macppc</title>
      <link>https://guangchuangyu.github.io/cn/2007/05/edit-partition-netbsd-macppc/</link>
      <pubDate>Mon, 14 May 2007 04:43:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/05/edit-partition-netbsd-macppc/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#disklabel wd0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到原始分区如下: 7 partitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#        size    offset     fstype [fsize bsize cpg/sgs]
a:  20971520  25167648     4.2BSD      0     0     0  # (Cyl.  24967*-  45772*)
b:   1048576  46139168       swap                     # (Cyl.  45772*-  46813*)
c: 117210240         0     unused      0     0        # (Cyl.      0 - 116279)
d:  25165824      1824        HFS                     # (Cyl.      1*-  24967*)
e:  28079456  89130784        HFS                     # (Cyl.  88423*- 116279)
g:  41943040  47187744     4.2BSD      0     0     0  # (Cyl.  46813*-  88423*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a为netbsd的/分区，b为swap分区,c为整个硬盘，d为mac
os的系统盘。e为两系统共享分区(在os9下格式化为fat)，g为netbsd下的/home分区。
原本是两系统，os9.2一直都很少用，所以想删了，腾出空间来放数据。因为wd0d和wd0e不在连续的柱面上，所以无法将它们合并。&lt;/p&gt;

&lt;p&gt;新的分区方案如下：wd0d删了，分成两个，一个15M(需要一个HFS类型的分区来放置&lt;code&gt;ofwboot.xcf&lt;/code&gt;，因为openfirmwire不支持从netbsd分区里加载loader),剩下的作为&lt;code&gt;/home&lt;/code&gt;分区。把原来的&lt;code&gt;/home&lt;/code&gt;分区(&lt;code&gt;wd0g&lt;/code&gt;)和共享数据的分区(&lt;code&gt;wd0e&lt;/code&gt;)合并为一个分区，用于放置数据。
1. 第一步，也是最关键的一步，先备份好数据。

2. 安装hfsutils。用于操作那个15M的HFS分区（格式化，拷贝文件等工具）。hfsutils是命令行的，xhfs是tk界面的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pkgsrc tips</title>
      <link>https://guangchuangyu.github.io/cn/2007/05/pkgsrc-tips/</link>
      <pubDate>Mon, 14 May 2007 04:37:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/05/pkgsrc-tips/</guid>
      <description>&lt;h2 id=&#34;1-cpuflags&#34;&gt;1.cpuflags&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;devel/cpuflags:Determine compiler flags to best target current cpu&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cd /usr/pkgsrc/devel/cpuflags 
#make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在/etc/mk.conf中加入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sinclude &amp;quot;/usr/pkg/share/mk/cpuflags.mk&amp;quot;
.sinclude &amp;quot;/usr/pkg/share/mk/optimize_gcc.mk&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样make时便能够根据cpuflags进行优化编译了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scilab三维平面绘图</title>
      <link>https://guangchuangyu.github.io/cn/2007/05/scilab%E4%B8%89%E7%BB%B4%E5%B9%B3%E9%9D%A2%E7%BB%98%E5%9B%BE/</link>
      <pubDate>Thu, 03 May 2007 10:27:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2007/05/scilab%E4%B8%89%E7%BB%B4%E5%B9%B3%E9%9D%A2%E7%BB%98%E5%9B%BE/</guid>
      <description>&lt;p&gt;三维绘图可以分为两大类型：矩阵型和曲面型。&lt;/p&gt;

&lt;h2 id=&#34;矩阵型&#34;&gt;矩阵型&lt;/h2&gt;

&lt;p&gt;通常是声明一个矩阵，以矩阵的长宽为x,y范围，以矩阵里面的数值为高z，
使用&lt;code&gt;plot3d(t1,t2,Z,alpha=a,theta=b)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t1:y轴方向的范围&lt;/li&gt;
&lt;li&gt;t2:x轴方向的范围&lt;/li&gt;
&lt;li&gt;Z:矩阵&lt;/li&gt;
&lt;li&gt;alpha&lt;/li&gt;
&lt;li&gt;theta参数用于指定角度，让图绘出来以某个特定的角度呈现出来。(optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt;clear -&amp;gt;A=[1 2 5 4 3;0 3 2 8 6;2 4 6 7 5;2 3 4 3 1];
-&amp;gt;t1=1:4; -&amp;gt;t2=1:5;
//plot3d1与plot3d语法类似，能够嵌入多种颜色
-&amp;gt;plot3d(t1,t2,A,alpha=45,theta=45);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mesh不需要边界声明， &lt;code&gt;-&amp;gt;mesh(A);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qvwm窗口管理器的windows2000主题</title>
      <link>https://guangchuangyu.github.io/cn/2006/06/qvwm%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84windows2000%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Sat, 24 Jun 2006 04:33:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2006/06/qvwm%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84windows2000%E4%B8%BB%E9%A2%98/</guid>
      <description>&lt;p&gt;&lt;em&gt;qvwm&lt;/em&gt; is a window manager for the X Window system which provides a user
experience very close to Windows &lt;sup&gt;95&lt;/sup&gt;&amp;frasl;&lt;sub&gt;98&lt;/sub&gt;. It is small and extremely fast.&lt;/p&gt;

&lt;p&gt;可从其&lt;a href=&#34;http://qvwm.sourceforge.net/index_en.html&#34;&gt;主页&lt;/a&gt;上看到它的介绍及下载源码。&lt;/p&gt;

&lt;p&gt;这是我做的一个windows2000的主题。。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装os9和netbsd双系统</title>
      <link>https://guangchuangyu.github.io/cn/2006/06/os9-netbsd-dual-boot/</link>
      <pubDate>Wed, 14 Jun 2006 04:31:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2006/06/os9-netbsd-dual-boot/</guid>
      <description>&lt;h2 id=&#34;1-分区&#34;&gt;1 分区&lt;/h2&gt;

&lt;p&gt;用MacOS X 10.2 的光盘启动，运行Disk Utility，选择“Install Mac OS
9 Disk
Drivers”不然分区将不能在OS9中使用，我一共分了5个分区，12G,10G,512M,20G,13.4G。其中12Ｇ装OS9系统，10Ｇ装netbsd系统，512Ｍ为swap分区，20Ｇ为home
分区，最后一个为fat32格式，为两个系统所共享。&lt;/p&gt;

&lt;h2 id=&#34;2-安装os9&#34;&gt;2 安装os9&lt;/h2&gt;

&lt;p&gt;开机放入os9安装光盘，按住&lt;code&gt;Ｃ&lt;/code&gt;键，由光盘启动进入os9，在光盘根目录下点安装系统。指定第一个分区，选择安装的软件，十来分钟，便装完了。重新启动，将netbsd的启动程序&lt;code&gt;ofwboot.xcf&lt;/code&gt;放在os9的根目录下。&lt;/p&gt;

&lt;h2 id=&#34;3-安装netbsd&#34;&gt;3 安装netbsd&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在emacs里使用maxima</title>
      <link>https://guangchuangyu.github.io/cn/2005/05/%E5%9C%A8emacs%E9%87%8C%E4%BD%BF%E7%94%A8maxima/</link>
      <pubDate>Sat, 28 May 2005 08:15:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2005/05/%E5%9C%A8emacs%E9%87%8C%E4%BD%BF%E7%94%A8maxima/</guid>
      <description>&lt;h2 id=&#34;下载imaxima&#34;&gt;下载imaxima   &lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://members3.jcom.home.ne.jp/imaxima/Site/Download%20and%20Install_files/imaxima-imath-0.97a.tar.gz&#34;&gt;http://members3.jcom.home.ne.jp/imaxima/Site/Download%20and%20Install_files/imaxima-imath-0.97a.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进行安装。
默认将安装在/usr/local/share/emacs/site-lisp下，在~/.emacs下加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(load &amp;quot;imaxima&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动emacs,按M-x,键入imaxima运行maxima 但是进行运算时出错。
&lt;img src=&#34;http://guangchuangyu.github.io/blog_images/2005/05/070902122953.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;需要breqn094包，可从&lt;a href=&#34;ftp://ftp.ams.org/pub/tex/breqn.zip&#34;&gt;ftp://ftp.ams.org/pub/tex/breqn.zip&lt;/a&gt;下载，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/share/texmf/tex/latex/
sudo unzip ~/Downloads/breqn.zip
sudo texhash
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>scau校园网认证</title>
      <link>https://guangchuangyu.github.io/cn/2005/03/scau%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Mon, 14 Mar 2005 04:30:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2005/03/scau%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81/</guid>
      <description>&lt;p&gt;锐捷认证。非标准的802.1认证。 我采用mystar来认证，但是不会重连。。
我自已写了个shell script来实现断线后重连。。。&lt;/p&gt;

&lt;p&gt;华农现在的校园网用锐捷认证，windows下的认证程序还行。linux下的客户端垃圾得不得了啊。。我用苹果笔记本PowerBookG3(fireware)。锐捷没有苹果下的认证客户端，于是我上不了网了，很是郁闷。。。&lt;/p&gt;

&lt;p&gt;我装了gentoo。最初尝试用qemu的user-mode来虚拟x86的指令集，再用xrgsu（锐捷linux版认证程序）提供运行所需的libs。最终xrgsu可以运行。但是找不到网卡。后面我就放弃了。&lt;/p&gt;

&lt;p&gt;拉了一个月ADSL，在一次偶然的机会我发现了mystar。mystar是用libnet＋libpcap写的，关键的代码不到200行（libnet和libpcap是平台无关的分组构造发送、分组截获C函数库）&lt;code&gt;mystar&lt;/code&gt;是网上一个叫netxray的人写的。
下面是源码&lt;code&gt;http://bbs.whnet.edu.cn/upload/mystarV0.1-src.zip&lt;/code&gt;，解压密码是&lt;code&gt;netxray&lt;/code&gt; 解压后:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd mystarV0.1 
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#修改我的ID跟password。
vim mystar.conf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;./mystar&lt;/code&gt;运行，并且认证成功!&lt;/p&gt;

&lt;p&gt;随后我发现一个问题，就是不会自动重连，老是会断线。在mystar.conf里面有一段&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powerbook G3上安装gentoo</title>
      <link>https://guangchuangyu.github.io/cn/2005/01/powerbook-gentoo/</link>
      <pubDate>Fri, 14 Jan 2005 04:32:00 +0800</pubDate>
      
      <guid>https://guangchuangyu.github.io/cn/2005/01/powerbook-gentoo/</guid>
      <description>&lt;p&gt;下面是我在PowerBook G3上安装Gentoo的全过程。。&lt;/p&gt;

&lt;p&gt;自己做一个备忘录，也给想在Powerbook上装Gentoo的做一个参考。&lt;/p&gt;

&lt;p&gt;以下为基本的安装过程，详细请参考Gentoo的文档&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gentoo.org/doc/en/handbook/handbook-ppc.xml&#34;&gt;http://www.gentoo.org/doc/en/handbook/handbook-ppc.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本的安装步骤如下：&lt;/p&gt;

&lt;p&gt;用2004.3LiveCD进入。&lt;/p&gt;

&lt;h2 id=&#34;1-配置网络&#34;&gt;1. 配置网络&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;＃net-setup eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;回答它几个问题就行了。&lt;/p&gt;

&lt;h2 id=&#34;2-分区&#34;&gt;2.分区&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#mac-fdisk /dev/hda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下是我的分区。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/dev/hda
 # type name length base ( size ) system
/dev/hda1 Apple_partition_map Apple 63 @ 1 ( 31.5k) Partition map
/dev/hda2 Apple_Bootstrap bootstrap 1600 @ 64 (800.0k) NewWorld bootblock
/dev/hda3 Apple_UNIX_SVR2 / 12582912 @ 1664 ( 6.0G) Linux native
/dev/hda4 Apple_UNIX_SVR2 swap 1048576 @ 12584576 (512.0M) Linux swap
/dev/hda5 Apple_UNIX_SVR2 /home 6007728 @ 13633152 ( 2.9G) Linux native

Block size=512, Number of Blocks=19640880
DeviceType=0x0, DeviceId=0x0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>